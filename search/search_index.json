{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Xtyle A minimalistic framework. This framework is heavily inspired by 5 tools. Frameworks (3) React Vue Mithril Tools (2) Immer ( Produce ) Material Design ( Ripple ) | x-ripple JSX | Demo < button x-ripple = {} > Click Me </ button > Tools to Build . . . routes and history | A Router components | Reactive & Reusable Component (s) directives | Global Directives val | Global State Variables reactive ctx | Global Static Variables non-reactive app.use(plugin) | Reusable Plugins Application Setup app.js const app = xtyle . app ({ app : {}, // (1) history : false , // (2) reactive : true , // (3) routes : {}, // (4) components : [], // (5) directives : {}, // (6) methods : {}, // (7) ctx : {}, // (8) val : {}, // (9) }); Application Component IF true , the URLs will not include the # IF true , the Application Component will re-render everytime you change routes . All Views you want the application to have All Global Components All Global Directives All Global Methods All Global Static non-reactive values All Global vars aka reactive values Property Type Description app Object Application Component history Boolean Use the hash ( # ) in the URLS ? ( Yes: false ) and ( No: true ) reactive Boolean Re-render everytime you change routes . routes Object All Views you want the application to have components Array All Global Components directives Object All Global Directives methods Object All Global Methods ctx Object All Global Static non-reactive values val Object All Global Values aka reactive values","title":"Introduction"},{"location":"#welcome-to-xtyle","text":"A minimalistic framework. This framework is heavily inspired by 5 tools. Frameworks (3) React Vue Mithril Tools (2) Immer ( Produce ) Material Design ( Ripple ) | x-ripple JSX | Demo < button x-ripple = {} > Click Me </ button >","title":"Welcome to Xtyle"},{"location":"#tools-to-build","text":"routes and history | A Router components | Reactive & Reusable Component (s) directives | Global Directives val | Global State Variables reactive ctx | Global Static Variables non-reactive app.use(plugin) | Reusable Plugins","title":"Tools to Build . . ."},{"location":"#application-setup","text":"app.js const app = xtyle . app ({ app : {}, // (1) history : false , // (2) reactive : true , // (3) routes : {}, // (4) components : [], // (5) directives : {}, // (6) methods : {}, // (7) ctx : {}, // (8) val : {}, // (9) }); Application Component IF true , the URLs will not include the # IF true , the Application Component will re-render everytime you change routes . All Views you want the application to have All Global Components All Global Directives All Global Methods All Global Static non-reactive values All Global vars aka reactive values Property Type Description app Object Application Component history Boolean Use the hash ( # ) in the URLS ? ( Yes: false ) and ( No: true ) reactive Boolean Re-render everytime you change routes . routes Object All Views you want the application to have components Array All Global Components directives Object All Global Directives methods Object All Global Methods ctx Object All Global Static non-reactive values val Object All Global Values aka reactive values","title":"Application Setup"},{"location":"api/","text":"( API ) Components const CONTROLLER = { get state () {}, // { Values } Self set state ( method ) {}, // { Values } Self $reset () {}, // { State } Reset get $router () {}, // { router } App get $route () {}, // { route } App View get $gui () {}, // { components } App get $store () {}, // { val } App get $ctx () {}, // { ctx } App toggle ( el , key , value = null ) {}, // { Toggle } Children / Siblings $toggle ( key , value = null ) {}, // { Toggle } Parent / Self get $methods () {}, // { methods } App $emit ( action , value = null ) {}, // { Emit } from Child to Parent get $ui () {}, // { Globals } }; State Key Description get() => state return current values set(method) => state update current values Example ( Get ) const buttonComponent = xtyle . dom ({ tag : \"button\" , data : { title : \"Click Me\" , }, slot : { default () { const { title } = this . state ; return title ; }, }, }); Example ( Set ) { self || this }. state = ( draft ) => { draft . count += 1 ; }; // attrs uses (`self`) // slot uses (`this`) const maxCount = 5 ; const buttonComponent = xtyle . dom ({ tag : \"button\" , data : { count : 0 , }, attrs : { // Attrs uses (`self`) \"x-on:click\" : ( self ) => { const { count } = self . state ; const isMax = count > maxCount ; if ( ! isMax ) { /* [Update Current Values] @set(method) => state */ self . state = ( draft ) => { draft . count += 1 ; }; } else { self . $reset (); } }, }, slot : { // Slot(s) uses (`this`) default () { const { count } = this . state ; return \"Count is: \" + count ; }, }, }); Tools Key Description $reset Reset current-state to the original-state $toggle Self element toggle class (es) toggle Children element toggle class (es) $router App router controller $gui App components $store App val (s) Values aka reactive values $ctx App ctx (s) Static non-reactive values $methods App methods $emit Emit a method with arguments from Child to Parent $ui Application Configs $Emit Method $emit ( \"parentMethod\" , { txt : \"hello\" }); Update const parentKey = \"title\" ; const value = \"Welcome\" ; $emit ( `update: ${ key } ` , value );","title":"(API) Components"},{"location":"api/#api-components","text":"const CONTROLLER = { get state () {}, // { Values } Self set state ( method ) {}, // { Values } Self $reset () {}, // { State } Reset get $router () {}, // { router } App get $route () {}, // { route } App View get $gui () {}, // { components } App get $store () {}, // { val } App get $ctx () {}, // { ctx } App toggle ( el , key , value = null ) {}, // { Toggle } Children / Siblings $toggle ( key , value = null ) {}, // { Toggle } Parent / Self get $methods () {}, // { methods } App $emit ( action , value = null ) {}, // { Emit } from Child to Parent get $ui () {}, // { Globals } };","title":"(API) Components"},{"location":"api/#state","text":"Key Description get() => state return current values set(method) => state update current values","title":"State"},{"location":"api/#example-get","text":"const buttonComponent = xtyle . dom ({ tag : \"button\" , data : { title : \"Click Me\" , }, slot : { default () { const { title } = this . state ; return title ; }, }, });","title":"Example (Get)"},{"location":"api/#example-set","text":"{ self || this }. state = ( draft ) => { draft . count += 1 ; }; // attrs uses (`self`) // slot uses (`this`) const maxCount = 5 ; const buttonComponent = xtyle . dom ({ tag : \"button\" , data : { count : 0 , }, attrs : { // Attrs uses (`self`) \"x-on:click\" : ( self ) => { const { count } = self . state ; const isMax = count > maxCount ; if ( ! isMax ) { /* [Update Current Values] @set(method) => state */ self . state = ( draft ) => { draft . count += 1 ; }; } else { self . $reset (); } }, }, slot : { // Slot(s) uses (`this`) default () { const { count } = this . state ; return \"Count is: \" + count ; }, }, });","title":"Example (Set)"},{"location":"api/#tools","text":"Key Description $reset Reset current-state to the original-state $toggle Self element toggle class (es) toggle Children element toggle class (es) $router App router controller $gui App components $store App val (s) Values aka reactive values $ctx App ctx (s) Static non-reactive values $methods App methods $emit Emit a method with arguments from Child to Parent $ui Application Configs","title":"Tools"},{"location":"api/#emit","text":"","title":"$Emit"},{"location":"api/#method","text":"$emit ( \"parentMethod\" , { txt : \"hello\" });","title":"Method"},{"location":"api/#update","text":"const parentKey = \"title\" ; const value = \"Welcome\" ; $emit ( `update: ${ key } ` , value );","title":"Update"},{"location":"application/","text":"Xtyle | Application Views Create Views with your Components Browser Usage < script src = \"https://unpkg.com/xtyle@latest\" ></ script > Xtyle App Demo | HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> <!-- Config --> < title > Xtyle App </ title > <!-- Xtyle JS --> < script src = \"https://unpkg.com/xtyle@latest\" ></ script > </ head > < body > < div id = \"app\" ></ div > <!-- Xtyle Code --> < script > // Inject CSS xtyle . inject ({ id : \"xtyle-app\" , code : `main { margin-top: 25%; } button { margin: 0 2px; }` , }); // Global Reactive const dict = xtyle . dict ({ count : 0 , add () { this . state = ( draft ) => { if ( draft . count > 9 ) { this . reset (); } else { draft . count += 1 ; } }; }, }); // Reusable Component (Global State) const Component = xtyle . dom ({ tag : \"button\" , data : { dict , }, attrs : { \"x-on:click\" : () => dict . state . add (), }, slot : { default () { // Access $store.project (Defined in the App Section) const { project } = this . $store ; const { name } = project . state ; // Access \"dict\" const { count } = dict . state ; // You can also use: `this.state.dict` return `(Global- ${ name } ) Count is: ${ count } ` ; }, }, }); // Reusable Component (Local State) const maxCount = 5 ; const LocalComponent = xtyle . dom ({ tag : \"button\" , data : { count : 0 , }, attrs : { // Attrs uses (`self`) \"x-on:click\" : ( self ) => { const { count } = self . state ; const isMax = count > maxCount ; if ( ! isMax ) { /* [Update Current Values] @set(method) => state */ self . state = ( draft ) => { draft . count += 1 ; }; } else { self . $reset (); } }, }, slot : { // Slot(s) uses (`this`) default () { const { count } = this . state ; return \"Count is: \" + count ; }, }, }); // Home Page const pageHome = { slot : { default () { const { $route , $router } = this ; const current = $router . args . name || \"home\" ; const pageName = current . charAt ( 0 ). toUpperCase () + current . slice ( 1 ); return [ \"div\" , {}, [ [ \"h3\" , {}, pageName + \" | Page\" ], [ \"br\" , {}, []], LocalComponent (), Component (), ], ]; }, }, }; // App Component const App = { slot : { default () { const { $route , $router } = this ; return [ \"main\" , { style : \"text-align: center;\" , }, [ \"Xtyle Application\" , [ \"br\" , {}, []], [ \"br\" , {}, []], [ \"button\" , { \"x-on:click\" : () => { $router . go ( \"/\" ); }, }, [ \"home\" ], ], [ \"button\" , { \"x-on:click\" : () => { $router . go ( \"/about\" ); }, }, [ \"about\" ], ], [ \"button\" , { \"x-ripple\" : { color : \"red\" , circle : true , center : true }, }, [ \"x-ripple\" ], ], [ \"br\" , {}, []], [ \"br\" , {}, []], $route , ], ]; }, }, }; // Xtyle App const app = xtyle . app ({ app : App , val : { project : { name : \"xtyle\" , }, }, methods : { changeTitle () { console . log ( this ); }, }, routes : { \"/\" : pageHome , \"/{name}\" : pageHome , }, }); // Mount app . mount ( \"#app\" ); </ script > </ body > </ html >","title":"Application"},{"location":"application/#xtyle-application","text":"Views Create Views with your Components","title":"Xtyle | Application"},{"location":"application/#browser-usage","text":"< script src = \"https://unpkg.com/xtyle@latest\" ></ script > Xtyle App","title":"Browser Usage"},{"location":"application/#demo-html","text":"<!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> <!-- Config --> < title > Xtyle App </ title > <!-- Xtyle JS --> < script src = \"https://unpkg.com/xtyle@latest\" ></ script > </ head > < body > < div id = \"app\" ></ div > <!-- Xtyle Code --> < script > // Inject CSS xtyle . inject ({ id : \"xtyle-app\" , code : `main { margin-top: 25%; } button { margin: 0 2px; }` , }); // Global Reactive const dict = xtyle . dict ({ count : 0 , add () { this . state = ( draft ) => { if ( draft . count > 9 ) { this . reset (); } else { draft . count += 1 ; } }; }, }); // Reusable Component (Global State) const Component = xtyle . dom ({ tag : \"button\" , data : { dict , }, attrs : { \"x-on:click\" : () => dict . state . add (), }, slot : { default () { // Access $store.project (Defined in the App Section) const { project } = this . $store ; const { name } = project . state ; // Access \"dict\" const { count } = dict . state ; // You can also use: `this.state.dict` return `(Global- ${ name } ) Count is: ${ count } ` ; }, }, }); // Reusable Component (Local State) const maxCount = 5 ; const LocalComponent = xtyle . dom ({ tag : \"button\" , data : { count : 0 , }, attrs : { // Attrs uses (`self`) \"x-on:click\" : ( self ) => { const { count } = self . state ; const isMax = count > maxCount ; if ( ! isMax ) { /* [Update Current Values] @set(method) => state */ self . state = ( draft ) => { draft . count += 1 ; }; } else { self . $reset (); } }, }, slot : { // Slot(s) uses (`this`) default () { const { count } = this . state ; return \"Count is: \" + count ; }, }, }); // Home Page const pageHome = { slot : { default () { const { $route , $router } = this ; const current = $router . args . name || \"home\" ; const pageName = current . charAt ( 0 ). toUpperCase () + current . slice ( 1 ); return [ \"div\" , {}, [ [ \"h3\" , {}, pageName + \" | Page\" ], [ \"br\" , {}, []], LocalComponent (), Component (), ], ]; }, }, }; // App Component const App = { slot : { default () { const { $route , $router } = this ; return [ \"main\" , { style : \"text-align: center;\" , }, [ \"Xtyle Application\" , [ \"br\" , {}, []], [ \"br\" , {}, []], [ \"button\" , { \"x-on:click\" : () => { $router . go ( \"/\" ); }, }, [ \"home\" ], ], [ \"button\" , { \"x-on:click\" : () => { $router . go ( \"/about\" ); }, }, [ \"about\" ], ], [ \"button\" , { \"x-ripple\" : { color : \"red\" , circle : true , center : true }, }, [ \"x-ripple\" ], ], [ \"br\" , {}, []], [ \"br\" , {}, []], $route , ], ]; }, }, }; // Xtyle App const app = xtyle . app ({ app : App , val : { project : { name : \"xtyle\" , }, }, methods : { changeTitle () { console . log ( this ); }, }, routes : { \"/\" : pageHome , \"/{name}\" : pageHome , }, }); // Mount app . mount ( \"#app\" ); </ script > </ body > </ html >","title":"Demo | HTML"},{"location":"component/","text":"Reusable Component (s) Create reusable components Component | Setup component.js export default xtyle . dom ({ tag : \"string\" , // (1) props : {}, // (2) data : {}, // (3) sync : {}, // (4) follow : [], // (5) methods : {}, // (6) slots : [], // (7) slot : { default () {}, // (8) }, attrs : {}, // (9) css : {}, // (10) style : {}, // (11) // Events init () {}, // (12) mounted () {}, // (13) }); HTML element <tag> Argumnets to be passed to the component Component's Reactive-Data Sync Values with parent. Binds { componentKey : parentKey } List all vars that the component should follow and react to changes Component's internal methods List of slots you will like to create. If none is defined, the default slot will be rendered. Each function will be representing a slot HTML ( slot ) element attributes HTML ( slot ) element class (es) HTML ( slot ) element style (s) Runs Onces as long as the component is not re-render by the parent Runs when Mounted & Updated Property Type Description tag String HTML element <tag> props Object Argumnets to be passed to the component data Object Component's Reactive-Data sync Object Sync Values with parent. Binds { componentKey : parentKey } follow Array(String) List all vars that the component should follow and react to changes methods Object Component's internal methods slots Array(String) List of slots you will like to create slot Object Each slot must be a function attrs Object HTML ( slot ) element attributes css Object HTML ( slot ) element class (es) style Object HTML ( slot ) element style (s) Component | Events Property Description init Runs Onces as long as the component is not re-render by the parent mounted Runs when Mounted & Updated Re writable myComponent ({ titlePROP : \"Hello World\" , $sync : {}, $slot : {}, $attrs : {}, $methods : {}, $mounted () {}, }); Internal Code switch ( key ) { case \"$sync\" : schema . sync = { ... schema . sync , ... kwargs . $sync }; break ; case \"$slot\" : schema . slot = { ... schema . slot , ... kwargs . $slot }; break ; case \"$attrs\" : schema . attrs = { ... schema . attrs , ... kwargs . $attrs }; break ; case \"$methods\" : schema . methods = { ... schema . methods , ... kwargs . $methods }; break ; case \"$mounted\" : schema . mounted = kwargs . $mounted ; break ; }","title":"Component"},{"location":"component/#reusable-components","text":"Create reusable components","title":"Reusable Component(s)"},{"location":"component/#component-setup","text":"component.js export default xtyle . dom ({ tag : \"string\" , // (1) props : {}, // (2) data : {}, // (3) sync : {}, // (4) follow : [], // (5) methods : {}, // (6) slots : [], // (7) slot : { default () {}, // (8) }, attrs : {}, // (9) css : {}, // (10) style : {}, // (11) // Events init () {}, // (12) mounted () {}, // (13) }); HTML element <tag> Argumnets to be passed to the component Component's Reactive-Data Sync Values with parent. Binds { componentKey : parentKey } List all vars that the component should follow and react to changes Component's internal methods List of slots you will like to create. If none is defined, the default slot will be rendered. Each function will be representing a slot HTML ( slot ) element attributes HTML ( slot ) element class (es) HTML ( slot ) element style (s) Runs Onces as long as the component is not re-render by the parent Runs when Mounted & Updated Property Type Description tag String HTML element <tag> props Object Argumnets to be passed to the component data Object Component's Reactive-Data sync Object Sync Values with parent. Binds { componentKey : parentKey } follow Array(String) List all vars that the component should follow and react to changes methods Object Component's internal methods slots Array(String) List of slots you will like to create slot Object Each slot must be a function attrs Object HTML ( slot ) element attributes css Object HTML ( slot ) element class (es) style Object HTML ( slot ) element style (s)","title":"Component | Setup"},{"location":"component/#component-events","text":"Property Description init Runs Onces as long as the component is not re-render by the parent mounted Runs when Mounted & Updated","title":"Component | Events"},{"location":"component/#rewritable","text":"myComponent ({ titlePROP : \"Hello World\" , $sync : {}, $slot : {}, $attrs : {}, $methods : {}, $mounted () {}, });","title":"Rewritable"},{"location":"component/#internal-code","text":"switch ( key ) { case \"$sync\" : schema . sync = { ... schema . sync , ... kwargs . $sync }; break ; case \"$slot\" : schema . slot = { ... schema . slot , ... kwargs . $slot }; break ; case \"$attrs\" : schema . attrs = { ... schema . attrs , ... kwargs . $attrs }; break ; case \"$methods\" : schema . methods = { ... schema . methods , ... kwargs . $methods }; break ; case \"$mounted\" : schema . mounted = kwargs . $mounted ; break ; }","title":"Internal Code"},{"location":"routes/","text":"Xtyle | Routes Tip You can define route (s) like this some-{key1}-{key2}/{key3} export default { routes : { \"/mypath/some-{key1}-{key2}/{key3}\" : pageComponent , }, }; Controller You can access the current router via the this.$router inside your components. View You can access the current route via the this.$route inside your components. const myComponent = { mounted () { const { $router } = this ; console . log ( $router ); }, slot : { default () { const { $route } = this ; return $route ; }, }, }; $router You should see . . . go to change routes. route path args your pre-defined arguments query any paramater in the query ?key1=val1&key2=val2 Example $router { \"go\" : \"function\" , \"route\" : \"/mypath/some-{key1}-{key2}/{key3}\" , \"path\" : \"/mypath/some-val1-val2/val3\" , \"args\" : { \"key1\" : \"val1\" , \"key2\" : \"val2\" , \"key3\" : \"val3\" }, \"query\" : { \"key\" : \"val\" } }","title":"Routes"},{"location":"routes/#xtyle-routes","text":"Tip You can define route (s) like this some-{key1}-{key2}/{key3} export default { routes : { \"/mypath/some-{key1}-{key2}/{key3}\" : pageComponent , }, }; Controller You can access the current router via the this.$router inside your components. View You can access the current route via the this.$route inside your components. const myComponent = { mounted () { const { $router } = this ; console . log ( $router ); }, slot : { default () { const { $route } = this ; return $route ; }, }, }; $router You should see . . . go to change routes. route path args your pre-defined arguments query any paramater in the query ?key1=val1&key2=val2","title":"Xtyle | Routes"},{"location":"routes/#example-router","text":"{ \"go\" : \"function\" , \"route\" : \"/mypath/some-{key1}-{key2}/{key3}\" , \"path\" : \"/mypath/some-val1-val2/val3\" , \"args\" : { \"key1\" : \"val1\" , \"key2\" : \"val2\" , \"key3\" : \"val3\" }, \"query\" : { \"key\" : \"val\" } }","title":"Example $router"},{"location":"jsx/","text":"Here you will learn how to use this library with JSX and Vite . Click Here to Download the template. Is just a simple vite template with the configurations to transform JSX into Xtyle Code After downloading and unzipping just run the following code inside the folder: Installation npm install npm run dev Demo | Application Note It comes with five (5) main parts . ( Main , App , View , Button , Page Name ) Main App View Button Page Name Main (App) ./src/main.js import \"./assets/style.css\" ; import App from \"./App\" ; import view from \"./views\" ; import store from \"./store\" ; // val import globals from \"./globals\" ; // ctx const app = xtyle . app ({ app : App , val : store , ctx : globals , routes : { \"/\" : view . sample , \"/{name}\" : view . sample , }, }); app . mount ( \"#app\" ); Application (Object) ./src/App.jsx import javascriptLogo from \"./assets/logos/javascript.svg\" ; import xtyleLogo from \"./assets/logos/xtyle.svg\" ; export default { slot : { default () { const { $route , $router } = this ; if ( $router . route === \"404\" ) { return $route ; } return ( < div id = \"app\" > < h1 > Xtyle | App < /h1> < a href = \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target = \"_blank\" > < img src = { javascriptLogo } class = \"logo vanilla\" alt = \"JavaScript logo\" /> < /a> < a href = \"https://hlop3z.github.io/xtyle/\" target = \"_blank\" > < img src = { xtyleLogo } class = \"logo\" alt = \"Xtyle logo\" /> < /a> < br /> < br /> < button x - ripple = {{ color : \"red\" , circle : true , center : true }} > X - Ripple < /button> < br /> < br /> { $route } < /div> ); }, }, }; View (Object) ./src/views/sample.jsx import components from \"../components\" ; const { pageName , xButton } = components ; export default { tag : \"div\" , slot : { default () { const { $router } = this ; return ( < div > { pageName ()} < br /> < button x - ripple x - on : click = {() => $router . go ( \"/\" )} > Go Home < /button> < button x - on : click = {() => $router . go ( \"/2nd\" )} > Go Second < /button> < button x - on : click = {() => $router . go ( \"/3rd\" )} > Go Third < /button> < button x - on : click = {() => $router . go ( \"/not/found/\" + new Date (). toISOString ()) } > Page Not Found < /button> < br /> < br /> { xButton ({ isGlobal : false })} { xButton ({ isGlobal : true })} < /div> ); }, }, }; Button (Component) ./src/components/x/button.jsx export default { tag : \"button\" , follow : [ \"counter\" ], props : { isGlobal : false , }, data : { count : 0 , }, attrs : { \"x-on:click\" : ( vnode , event ) => { const { isGlobal } = vnode . state ; const { counter } = vnode . $ui . val ; if ( isGlobal ) { counter . state = ( draft ) => { draft . count += 1 ; }; } else { vnode . state = ( draft ) => { draft . count += 1 ; }; } console . log ( event ); }, }, slot : { default () { const { isGlobal } = this . state ; if ( isGlobal ) { const { counter } = this . $ui . val ; const { count } = counter . state ; return \"Global Count is: \" + count ; } const { count } = this . state ; return \"Local Count is: \" + count ; }, }, }; Page Name (Component) ./src/components/page-name.jsx export default { tag : \"h3\" , slot : { default () { const { $router } = this ; const current = $router . args . name || \"home\" ; const pageName = current . charAt ( 0 ). toUpperCase () + current . slice ( 1 ); return pageName + \" View\" ; }, }, };","title":"Getting Started"},{"location":"jsx/#installation","text":"npm install npm run dev","title":"Installation"},{"location":"jsx/#demo-application","text":"Note It comes with five (5) main parts . ( Main , App , View , Button , Page Name ) Main App View Button Page Name Main (App) ./src/main.js import \"./assets/style.css\" ; import App from \"./App\" ; import view from \"./views\" ; import store from \"./store\" ; // val import globals from \"./globals\" ; // ctx const app = xtyle . app ({ app : App , val : store , ctx : globals , routes : { \"/\" : view . sample , \"/{name}\" : view . sample , }, }); app . mount ( \"#app\" ); Application (Object) ./src/App.jsx import javascriptLogo from \"./assets/logos/javascript.svg\" ; import xtyleLogo from \"./assets/logos/xtyle.svg\" ; export default { slot : { default () { const { $route , $router } = this ; if ( $router . route === \"404\" ) { return $route ; } return ( < div id = \"app\" > < h1 > Xtyle | App < /h1> < a href = \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target = \"_blank\" > < img src = { javascriptLogo } class = \"logo vanilla\" alt = \"JavaScript logo\" /> < /a> < a href = \"https://hlop3z.github.io/xtyle/\" target = \"_blank\" > < img src = { xtyleLogo } class = \"logo\" alt = \"Xtyle logo\" /> < /a> < br /> < br /> < button x - ripple = {{ color : \"red\" , circle : true , center : true }} > X - Ripple < /button> < br /> < br /> { $route } < /div> ); }, }, }; View (Object) ./src/views/sample.jsx import components from \"../components\" ; const { pageName , xButton } = components ; export default { tag : \"div\" , slot : { default () { const { $router } = this ; return ( < div > { pageName ()} < br /> < button x - ripple x - on : click = {() => $router . go ( \"/\" )} > Go Home < /button> < button x - on : click = {() => $router . go ( \"/2nd\" )} > Go Second < /button> < button x - on : click = {() => $router . go ( \"/3rd\" )} > Go Third < /button> < button x - on : click = {() => $router . go ( \"/not/found/\" + new Date (). toISOString ()) } > Page Not Found < /button> < br /> < br /> { xButton ({ isGlobal : false })} { xButton ({ isGlobal : true })} < /div> ); }, }, }; Button (Component) ./src/components/x/button.jsx export default { tag : \"button\" , follow : [ \"counter\" ], props : { isGlobal : false , }, data : { count : 0 , }, attrs : { \"x-on:click\" : ( vnode , event ) => { const { isGlobal } = vnode . state ; const { counter } = vnode . $ui . val ; if ( isGlobal ) { counter . state = ( draft ) => { draft . count += 1 ; }; } else { vnode . state = ( draft ) => { draft . count += 1 ; }; } console . log ( event ); }, }, slot : { default () { const { isGlobal } = this . state ; if ( isGlobal ) { const { counter } = this . $ui . val ; const { count } = counter . state ; return \"Global Count is: \" + count ; } const { count } = this . state ; return \"Local Count is: \" + count ; }, }, }; Page Name (Component) ./src/components/page-name.jsx export default { tag : \"h3\" , slot : { default () { const { $router } = this ; const current = $router . args . name || \"home\" ; const pageName = current . charAt ( 0 ). toUpperCase () + current . slice ( 1 ); return pageName + \" View\" ; }, }, };","title":"Demo | Application"}]}