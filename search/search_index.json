{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"( X )tyle Description This Preact Enhancement Tool is a comprehensive utility that enhances the capabilities of the Preact framework by providing additional functionality and features. It serves as a powerful companion to empower developers in building highly performant and customizable applications. This tool encompasses a collection of utility modules, for: Components and Directives Router and Routes Tabs State-Manager And, some extra tools . These utilities offer developers enhanced control and flexibility in creating components. Global Kit preact Preact Wrapped. xtyle Xtyle Utils. Usage < script src = \"https://unpkg.com/xtyle@latest\" ></ script > < script > console . log ( preact ); console . log ( xtyle ); </ script > (API) A pplication P rogramming I nterface Built-in Components Key Usage Description xtyle.layout Application Application Layout . xtyle.element Components Create custom Component(s) . xtyle.router.view Router Display current Route . xtyle.router.link Router Create a link <a> to a route. xtyle.tabs.view Tabs Display current Tab(s) . Example: < xtyle.element > </ xtyle.element > Global Methods Key Usage Description xtyle.createApp Config Configure global variables and init application. xtyle.inject CSS Inject CSS code. xtyle.camel Transform Convert string to camelCase. xtyle.slugify Transform Convert string to slug-ify. createApp xtyle . createApp ({ layout : {}, directives : {}, router : { history : true , routes : [ /* Routes */ ], before : ({ from , to , next }) => next (), after : ({ from , to }) => console . log ( from , to ), }, }); inject xtyle . inject ( \"body { color: red; }\" , \"ID_FOR_THIS_CODE\" ); camel xtyle . camel ( \"String-To-Convert-To-Camel-Case\" ); slugify xtyle . slugify ( \"String-To-Convert-To-Slug\" );","title":"Introduction"},{"location":"#xtyle","text":"Description This Preact Enhancement Tool is a comprehensive utility that enhances the capabilities of the Preact framework by providing additional functionality and features. It serves as a powerful companion to empower developers in building highly performant and customizable applications. This tool encompasses a collection of utility modules, for: Components and Directives Router and Routes Tabs State-Manager And, some extra tools . These utilities offer developers enhanced control and flexibility in creating components.","title":"(X)tyle"},{"location":"#global-kit","text":"preact Preact Wrapped. xtyle Xtyle Utils.","title":"Global Kit"},{"location":"#usage","text":"< script src = \"https://unpkg.com/xtyle@latest\" ></ script > < script > console . log ( preact ); console . log ( xtyle ); </ script >","title":"Usage"},{"location":"#api-application-programming-interface","text":"","title":"(API) Application Programming Interface"},{"location":"#built-in-components","text":"Key Usage Description xtyle.layout Application Application Layout . xtyle.element Components Create custom Component(s) . xtyle.router.view Router Display current Route . xtyle.router.link Router Create a link <a> to a route. xtyle.tabs.view Tabs Display current Tab(s) . Example: < xtyle.element > </ xtyle.element >","title":"Built-in Components"},{"location":"#global-methods","text":"Key Usage Description xtyle.createApp Config Configure global variables and init application. xtyle.inject CSS Inject CSS code. xtyle.camel Transform Convert string to camelCase. xtyle.slugify Transform Convert string to slug-ify.","title":"Global Methods"},{"location":"#createapp","text":"xtyle . createApp ({ layout : {}, directives : {}, router : { history : true , routes : [ /* Routes */ ], before : ({ from , to , next }) => next (), after : ({ from , to }) => console . log ( from , to ), }, });","title":"createApp"},{"location":"#inject","text":"xtyle . inject ( \"body { color: red; }\" , \"ID_FOR_THIS_CODE\" );","title":"inject"},{"location":"#camel","text":"xtyle . camel ( \"String-To-Convert-To-Camel-Case\" );","title":"camel"},{"location":"#slugify","text":"xtyle . slugify ( \"String-To-Convert-To-Slug\" );","title":"slugify"},{"location":"application/","text":"Description The purpose of the Application Configuration Layout is to provide developers with a structured and organized approach to managing the settings and parameters that control the overall appearance and behavior of a software application. This design approach aims to create a cohesive structure that enhances the organization and accessibility of settings, facilitating efficient locating and modification of specific options. Slots (sections) main <Fragment x-slot=\"main\" /> header <Fragment x-slot=\"header\" /> footer <Fragment x-slot=\"footer\" /> left <Fragment x-slot=\"left\" /> right <Fragment x-slot=\"right\" /> left-mini <Fragment x-slot=\"left-mini\" /> right-mini <Fragment x-slot=\"right-mini\" /> Configuration Layout const AppLayout = { // Sizes header: \"50px\", footer: \"50px\", right: \"185px\", left: \"185px\", leftMini: \"60px\", rightMini: \"60px\", // Layers headerLayer: 2, footerLayer: 2, leftLayer: 1, rightLayer: 1, }; const Config = { layout: AppLayout, directives: {}, router: {}, }; xtyle.createApp(Config); Sizing (Width & Height) Key Descriptions header Header's height footer Footer's height right Right's width left Left's width leftMini Left-Mini's width rightMini Right-Mini's width Layering (Z-Index) Key Descriptions headerLayer Header's layer footerLayer Footer's layer leftLayer Left's layer rightLayer Right's layer Application Cliping Use clip-{side} to trim the element to fit, without overlapping with other elements. Init x-init function App () { let admin = {}; return < xtyle . layout x - init = {( self ) => ( admin = self )} >< /xtyle.layout>; } Main Info clip-top clip-bottom clip-left clip-right < Fragment x-slot = \"main\" clip-top clip-bottom clip-left clip-right > </ Fragment > Sides Info clip-top clip-bottom To Open and Close use the toggle method. admin.toggle(\"left | right | left-mini | right-mini\") < Fragment x-slot = \"(left | right | left-mini | right-mini)\" clip-top clip-bottom class = \"open\" > Side </ Fragment > Demo function App() { let admin = {}; return ( <xtyle.layout x-init={(self) => (admin = self)}> {/* <!-- Header --> */} <Fragment x-slot=\"header\"> <button onClick={() => admin.toggle(\"left\")}>Toggle Left</button> Header <button onClick={() => admin.toggle(\"right-mini\")}>Toggle Right</button> </Fragment> {/* <!-- Main --> */} <Fragment x-slot=\"main\" clip-top clip-bottom clip-left clip-right> <br /> <button onClick={() => xtyle.router.go({ path: \"/\" })}>Home</button> <button onClick={() => xtyle.router.go({ name: \"custom\", args: { view: \"about\" } }) } > About </button> <br /> <br /> {/* <!-- Router --> */} <xtyle.router.view /> </Fragment> {/* <!-- Drawers --> */} <Fragment x-slot=\"left\" class=\"open\" clip-top clip-bottom x-swipe={(e) => console.log(e)} > Left </Fragment> <Fragment x-slot=\"right\" class=\"open\" clip-top clip-bottom> Right </Fragment> {/* <!-- Drawers (mini) --> */} <Fragment x-slot=\"left-mini\" class=\"open\" clip-top clip-bottom> Left-mini </Fragment> <Fragment x-slot=\"right-mini\" class=\"open\" clip-top clip-bottom> Right-mini </Fragment> {/* <!-- Footer --> */} <Fragment x-slot=\"footer\">Footer</Fragment> </xtyle.layout> ); } // Demo xtyle.inject(` .lt, .lb, .ll, .lr { border: 1px solid black; } .ll { text-align: right; } .lm, .lt { text-align: center; } button { margin: 0 8px; } `); export default App;","title":"Application"},{"location":"application/#configuration-layout","text":"const AppLayout = { // Sizes header: \"50px\", footer: \"50px\", right: \"185px\", left: \"185px\", leftMini: \"60px\", rightMini: \"60px\", // Layers headerLayer: 2, footerLayer: 2, leftLayer: 1, rightLayer: 1, }; const Config = { layout: AppLayout, directives: {}, router: {}, }; xtyle.createApp(Config);","title":"Configuration Layout"},{"location":"application/#sizing-width-height","text":"Key Descriptions header Header's height footer Footer's height right Right's width left Left's width leftMini Left-Mini's width rightMini Right-Mini's width","title":"Sizing (Width &amp; Height)"},{"location":"application/#layering-z-index","text":"Key Descriptions headerLayer Header's layer footerLayer Footer's layer leftLayer Left's layer rightLayer Right's layer","title":"Layering (Z-Index)"},{"location":"application/#application","text":"Cliping Use clip-{side} to trim the element to fit, without overlapping with other elements.","title":"Application"},{"location":"application/#init","text":"x-init function App () { let admin = {}; return < xtyle . layout x - init = {( self ) => ( admin = self )} >< /xtyle.layout>; }","title":"Init"},{"location":"application/#main","text":"Info clip-top clip-bottom clip-left clip-right < Fragment x-slot = \"main\" clip-top clip-bottom clip-left clip-right > </ Fragment >","title":"Main"},{"location":"application/#sides","text":"Info clip-top clip-bottom To Open and Close use the toggle method. admin.toggle(\"left | right | left-mini | right-mini\") < Fragment x-slot = \"(left | right | left-mini | right-mini)\" clip-top clip-bottom class = \"open\" > Side </ Fragment >","title":"Sides"},{"location":"application/#demo","text":"function App() { let admin = {}; return ( <xtyle.layout x-init={(self) => (admin = self)}> {/* <!-- Header --> */} <Fragment x-slot=\"header\"> <button onClick={() => admin.toggle(\"left\")}>Toggle Left</button> Header <button onClick={() => admin.toggle(\"right-mini\")}>Toggle Right</button> </Fragment> {/* <!-- Main --> */} <Fragment x-slot=\"main\" clip-top clip-bottom clip-left clip-right> <br /> <button onClick={() => xtyle.router.go({ path: \"/\" })}>Home</button> <button onClick={() => xtyle.router.go({ name: \"custom\", args: { view: \"about\" } }) } > About </button> <br /> <br /> {/* <!-- Router --> */} <xtyle.router.view /> </Fragment> {/* <!-- Drawers --> */} <Fragment x-slot=\"left\" class=\"open\" clip-top clip-bottom x-swipe={(e) => console.log(e)} > Left </Fragment> <Fragment x-slot=\"right\" class=\"open\" clip-top clip-bottom> Right </Fragment> {/* <!-- Drawers (mini) --> */} <Fragment x-slot=\"left-mini\" class=\"open\" clip-top clip-bottom> Left-mini </Fragment> <Fragment x-slot=\"right-mini\" class=\"open\" clip-top clip-bottom> Right-mini </Fragment> {/* <!-- Footer --> */} <Fragment x-slot=\"footer\">Footer</Fragment> </xtyle.layout> ); } // Demo xtyle.inject(` .lt, .lb, .ll, .lr { border: 1px solid black; } .ll { text-align: right; } .lm, .lt { text-align: center; } button { margin: 0 8px; } `); export default App;","title":"Demo"},{"location":"component/","text":"Description The xtyle.element serves the purpose of offering developers a convenient and centralized approach to creating components. It provides a versatile solution that can serve various purposes, with a primary focus on reusable directives . One of the key advantages of directives is their ability to simplify component development. By registering a global directive, developers can avoid the need to export/import tools for each component individually from multiple sources. Instead, they can leverage the global directive whenever it is deemed appropriate. This approach streamlines the development process and facilitates easier addition or removal of the directive from components as the project evolves. In summary, xtyle.element empowers developers by providing a centralized and efficient method for component creation. Through the utilization of reusable directives, developers can enhance productivity, maintain consistency, and seamlessly manage component-related functionalities throughout their projects. Directives Directives make everything easier. xtyle.element Use it to create a custom element. xtyle.slots Use it to collect slots from the props.children via x-slot name . xtyle.props Use it to collect props and make them camelCase . function Component(args) { // Collect const slots = xtyle.slots(args); const props = xtyle.props(args); // View return <xtyle.element x-tag=\"div\">Hello World</xtyle.element>; } Slot Reference(s) Key Type Description x-slot Util Used to define the location of a component using slots . Built-in Directives Key Type Description x-tag Util Used to define the HTML real element for the component . x-init Util Used to manage the component from the parent. x-click Directive Wrapper of preact's onClick x-click-outside Directive Detect click-outside current element. x-hover Directive Detect hover current element. x-resize Directive Detect resize window global element. x-ripple Directive Detect click current element. x-scroll Directive Detect scroll current element. x-swipe Directive Detect swipe current element. function Component() { // View return ( <xtyle.element x-tag=\"div\" x-init={(self) => console.log(self)} x-click={(e) => console.log(e)} x-click-outside={(e) => console.log(e)} x-hover={(e) => console.log(e)} x-resize={(e) => console.log(e)} x-ripple={(e) => console.log(e)} x-swipe={(e) => console.log(e)} x-scroll={(info) => console.log(info)} > Hello World </xtyle.element> ); } Component ( Utils ) Key Usage Description xtyle.element Components Create custom Component(s) . xtyle.slots Components Design the location of a component using slots . xtyle.props Components Transform props to camelCase . xtyle.class Components Transform { Object , Array , String } to CSS Class . xtyle.style Components Transform { Object , Array , String } to CSS Style .","title":"Component"},{"location":"component/#slot-references","text":"Key Type Description x-slot Util Used to define the location of a component using slots .","title":"Slot Reference(s)"},{"location":"component/#built-in-directives","text":"Key Type Description x-tag Util Used to define the HTML real element for the component . x-init Util Used to manage the component from the parent. x-click Directive Wrapper of preact's onClick x-click-outside Directive Detect click-outside current element. x-hover Directive Detect hover current element. x-resize Directive Detect resize window global element. x-ripple Directive Detect click current element. x-scroll Directive Detect scroll current element. x-swipe Directive Detect swipe current element. function Component() { // View return ( <xtyle.element x-tag=\"div\" x-init={(self) => console.log(self)} x-click={(e) => console.log(e)} x-click-outside={(e) => console.log(e)} x-hover={(e) => console.log(e)} x-resize={(e) => console.log(e)} x-ripple={(e) => console.log(e)} x-swipe={(e) => console.log(e)} x-scroll={(info) => console.log(info)} > Hello World </xtyle.element> ); }","title":"Built-in Directives"},{"location":"component/#component-utils","text":"Key Usage Description xtyle.element Components Create custom Component(s) . xtyle.slots Components Design the location of a component using slots . xtyle.props Components Transform props to camelCase . xtyle.class Components Transform { Object , Array , String } to CSS Class . xtyle.style Components Transform { Object , Array , String } to CSS Style .","title":"Component (Utils)"},{"location":"directives/","text":"Description Directives are a powerful tool that allows developers to reuse and encapsulate logic in their code. By leveraging custom directives, developers can effectively separate and encapsulate complex logic and low-level DOM operations, resulting in more modular and maintainable code. These directives enable the reuse of specific functionalities across multiple elements or components, promoting code consistency and reducing duplication. Custom directives provide a flexible and reusable approach to address unique requirements in web development. They can be used for a variety of purposes, such as applying specialized behaviors, manipulating the DOM, or implementing custom event handling. With custom directives, developers have the ability to create highly adaptable and reusable solutions that cater to specific needs. graph LR Component --> Directives Directives --> A[DOM Element] A[DOM Element] --> Component Properties props Arguments in camelCase format . self Arguments that construct the Component . Key Description self.ref.add Add class(es) to the DOM element self.ref.remove Remove class(es) to the DOM element self.ref.toggle Toggle class(es) to the DOM element self.ref.contains Check if DOM element Contains a class Example const Config = { directives : { demo : ( self , props ) => { // Self preact . useEffect (() => { self . ref . add ( \"add-class-after-init\" ); self . ref . remove ( \"add-class-after-init\" ); self . ref . toggle ([ \"toggled-class\" ], true ); self . ref . contains ( \"toggled-class\" ); }, []); // Props console . log ( props ); }, }, // Other Configs . . . };","title":"Directives"},{"location":"directives/#properties","text":"props Arguments in camelCase format . self Arguments that construct the Component . Key Description self.ref.add Add class(es) to the DOM element self.ref.remove Remove class(es) to the DOM element self.ref.toggle Toggle class(es) to the DOM element self.ref.contains Check if DOM element Contains a class","title":"Properties"},{"location":"directives/#example","text":"const Config = { directives : { demo : ( self , props ) => { // Self preact . useEffect (() => { self . ref . add ( \"add-class-after-init\" ); self . ref . remove ( \"add-class-after-init\" ); self . ref . toggle ([ \"toggled-class\" ], true ); self . ref . contains ( \"toggled-class\" ); }, []); // Props console . log ( props ); }, }, // Other Configs . . . };","title":"Example"},{"location":"getting_started/","text":"Description With the ( Xtyle + Preact ) Starter Template , developers can jumpstart their projects with a preconfigured environment that includes all the necessary setup and dependencies. It offers a streamlined development experience, allowing developers to focus on building their application's core functionality without worrying about the initial setup. The template can be easily downloaded and used as a foundation for a wide range of web projects. Whether you are starting a small personal website or developing a complex web application, the ( Xtyle + Preact ) Starter Template provides a robust starting point that combines the power of Xtyle and the flexibility of Preact. TypeScript Template Download Template Click here to Download unzip xtyle-ts-template.zip Demo ( Preview ) Project Build npm run build","title":"Getting Started"},{"location":"getting_started/#typescript-template","text":"Download Template Click here to Download unzip xtyle-ts-template.zip","title":"TypeScript Template"},{"location":"getting_started/#demo-preview","text":"","title":"Demo (Preview)"},{"location":"getting_started/#project-build","text":"npm run build","title":"Project Build"},{"location":"router/","text":"Description The purpose of the Router is to offer developers a convenient and efficient solution for managing client-side navigation and enhancing page rendering. One of its key advantages lies in enabling the functionality of Single Page Applications (SPAs). By rendering content on the client-side, SPAs provide dynamic and interactive user experiences without the need for full page reloads. The Router empowers developers to create seamless transitions between different views and components within their web applications. It allows for efficient content updates, resulting in a smoother and more responsive user interface. By handling navigation on the client-side, the Router optimizes the user experience by minimizing page load times and providing a more fluid interaction. Routes Key Descriptions path Uniform Resource Locator ( URL ), string that specifies the location of a specific resource name Name to reference the URL as a form of an \" ID \" view HyperScript component to render as a \" view \" or \" page \" const Routes = [ // Home Page { path : \"/\" , name : \"home\" , view : () => h ( \"div\" , {}, \"Home View\" ), }, // About Page { path : \"/{view}\" , name : \"custom\" , view : () => h ( \"div\" , {}, \"About View\" ), }, ]; Paths Tip Variables embedded within URLs for dynamic data retrieval and routing. Variables must be inside brackets {} . For example /my/path/key-{value} Key Required Descriptions {variable_name} Yes Regular variables {?variable_name} Optional IF it starts with ? its an optional variable {variable_name*} Optional IF it ends with * matches the remainder of the path const patternDictionary = { // Regular \"/\" : \"view-1\" , // Optional \"/a/b/{?key}\" : \"view-2\" , // Path \"/a/b/key-{name}/{path*}\" : \"view-3\" , }; Configuration Key Type Descriptions history Boolean This sets the browser's history regular ( true ) or hash ( false ). routes Array List of views / pages / components as objects . before Function Runs before each route change. after Function Runs after each route change. const Config = { router : { history : false , routes : Routes , before : ({ from , to , next }) => next (), after : ({ from , to }) => console . log ( from , to ), }, // Other Configs . . . }; Utils Key Description xtyle.router.current Info of the current Route. xtyle.router.view Display current Route . xtyle.router.link Create a link <a> to a route. xtyle.router.go Method to change routes. function App () { /* Menu */ const menu = { home : () => xtyle . router . go ({ path : \"/\" }), about : () => xtyle . router . go ({ name : \"custom\" , args : { view : \"about\" } }), }; /* Component */ return ( < div class = \"the-app\" > { /* <!-- Router Menu --> */ } < button onClick = { menu . home } > Home < /button> < button onClick = { menu . about } > About < /button> { /* <!-- Router View(s) --> */ } < xtyle . router . view /> < /div> ); }","title":"Router"},{"location":"router/#routes","text":"Key Descriptions path Uniform Resource Locator ( URL ), string that specifies the location of a specific resource name Name to reference the URL as a form of an \" ID \" view HyperScript component to render as a \" view \" or \" page \" const Routes = [ // Home Page { path : \"/\" , name : \"home\" , view : () => h ( \"div\" , {}, \"Home View\" ), }, // About Page { path : \"/{view}\" , name : \"custom\" , view : () => h ( \"div\" , {}, \"About View\" ), }, ];","title":"Routes"},{"location":"router/#paths","text":"Tip Variables embedded within URLs for dynamic data retrieval and routing. Variables must be inside brackets {} . For example /my/path/key-{value} Key Required Descriptions {variable_name} Yes Regular variables {?variable_name} Optional IF it starts with ? its an optional variable {variable_name*} Optional IF it ends with * matches the remainder of the path const patternDictionary = { // Regular \"/\" : \"view-1\" , // Optional \"/a/b/{?key}\" : \"view-2\" , // Path \"/a/b/key-{name}/{path*}\" : \"view-3\" , };","title":"Paths"},{"location":"router/#configuration","text":"Key Type Descriptions history Boolean This sets the browser's history regular ( true ) or hash ( false ). routes Array List of views / pages / components as objects . before Function Runs before each route change. after Function Runs after each route change. const Config = { router : { history : false , routes : Routes , before : ({ from , to , next }) => next (), after : ({ from , to }) => console . log ( from , to ), }, // Other Configs . . . };","title":"Configuration"},{"location":"router/#utils","text":"Key Description xtyle.router.current Info of the current Route. xtyle.router.view Display current Route . xtyle.router.link Create a link <a> to a route. xtyle.router.go Method to change routes. function App () { /* Menu */ const menu = { home : () => xtyle . router . go ({ path : \"/\" }), about : () => xtyle . router . go ({ name : \"custom\" , args : { view : \"about\" } }), }; /* Component */ return ( < div class = \"the-app\" > { /* <!-- Router Menu --> */ } < button onClick = { menu . home } > Home < /button> < button onClick = { menu . about } > About < /button> { /* <!-- Router View(s) --> */ } < xtyle . router . view /> < /div> ); }","title":"Utils"},{"location":"store/","text":"Signals A Preact signals wrapper that simplifies updating Array or Object structures by providing a streamlined approach. It offers an intuitive way to manage and modify complex data structures. The wrapper seamlessly integrates with Preact's Computed and Effect functionality, eliminating the need to remember which hook to use ( useComputed or computed ) or which effect to employ ( useSignalEffect or effect ). The wrapper automatically handles the appropriate selection based on whether the state is local or global. This seamless integration enhances the developer experience by reducing cognitive load and ensuring consistent usage of computed values and effects. It eliminates the need to track and differentiate between similar but context-specific functions, resulting in cleaner and more maintainable code Value (setup) Key Usage Description useSignal Local To be used inside a component . signal Global To be used globally in the application . Single (Value) const myState = xtyle . signal ( \"Hello World!\" ); Object (Value) const myState = xtyle . signal ({ title : \"Hello World\" , status : \"open\" , }); Methods Key Description update You can use it to update a value . But the benefit is when using Object(s) computed IF is \" Local \" uses useComputed else it uses computed effect IF is \" Local \" uses useSignalEffect else it uses effect reset You can use this method to reset the state to it's original value Single (Update) myState . value = \"New Value!\" ; // OR myState . update ( \"New Value!\" ); Object (Update) myState . update (( draft ) => ( draft . status = \"close\" )); Computed const keys = myState . computed (() => Object . keys ( myState . value )); Effect myState . effect (() => console . log ( myState . value ));","title":"Store"},{"location":"store/#value-setup","text":"Key Usage Description useSignal Local To be used inside a component . signal Global To be used globally in the application .","title":"Value (setup)"},{"location":"store/#single-value","text":"const myState = xtyle . signal ( \"Hello World!\" );","title":"Single (Value)"},{"location":"store/#object-value","text":"const myState = xtyle . signal ({ title : \"Hello World\" , status : \"open\" , });","title":"Object (Value)"},{"location":"store/#methods","text":"Key Description update You can use it to update a value . But the benefit is when using Object(s) computed IF is \" Local \" uses useComputed else it uses computed effect IF is \" Local \" uses useSignalEffect else it uses effect reset You can use this method to reset the state to it's original value","title":"Methods"},{"location":"store/#single-update","text":"myState . value = \"New Value!\" ; // OR myState . update ( \"New Value!\" );","title":"Single (Update)"},{"location":"store/#object-update","text":"myState . update (( draft ) => ( draft . status = \"close\" ));","title":"Object (Update)"},{"location":"store/#computed","text":"const keys = myState . computed (() => Object . keys ( myState . value ));","title":"Computed"},{"location":"store/#effect","text":"myState . effect (() => console . log ( myState . value ));","title":"Effect"},{"location":"tabs/","text":"Description The purpose of the Tabs component is to provide developers with an efficient way to handle client-side navigation within tabs, similar to the Router , but specifically designed for tab-based navigation. It allows developers to control tab navigation without tightly coupling the components and their controllers. With the Tabs component, developers can create modular and intuitive tabbed interfaces, promoting separation of concerns and code reusability. The component empowers developers to define and control tab navigation logic independently, offering customization and precise control over the user experience. Methods Key Description xtyle.tabs.view Display current Tab(s) . xtyle.tabs.toggle Method to change routes ( Multi ). xtyle.tabs.active Method to change routes ( Single ). Usage Tip Example of each util. View(s) < xtyle.tabs.view /> Toggle xtyle . tabs . toggle ( \"tabs-group-name\" , \"tab-name\" ); Active xtyle . tabs . active ( \"tabs-group-name\" , \"tab-name\" );","title":"Tabs"},{"location":"tabs/#methods","text":"Key Description xtyle.tabs.view Display current Tab(s) . xtyle.tabs.toggle Method to change routes ( Multi ). xtyle.tabs.active Method to change routes ( Single ).","title":"Methods"},{"location":"tabs/#usage","text":"Tip Example of each util.","title":"Usage"},{"location":"tabs/#views","text":"< xtyle.tabs.view />","title":"View(s)"},{"location":"tabs/#toggle","text":"xtyle . tabs . toggle ( \"tabs-group-name\" , \"tab-name\" );","title":"Toggle"},{"location":"tabs/#active","text":"xtyle . tabs . active ( \"tabs-group-name\" , \"tab-name\" );","title":"Active"}]}