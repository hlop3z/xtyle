{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Xtyle A minimalistic framework. This framework is heavily inspired by 5 tools. Frameworks (3) React Vue Mithril Tools (2) Immer ( Produce ) Material Design ( Ripple ) | x-ripple JSX | Demo < button x-ripple = {} > Click Me </ button > Tools to Build . . . routes and history | A Router components | Reactive & Reusable Component (s) directives | Global Directives val | Global State Variables reactive ctx | Global Static Variables non-reactive app.use(plugin) | Reusable Plugins Application Setup app.js const app = xtyle . app ({ app : {}, // (1) history : false , // (2) reactive : true , // (3) routes : {}, // (4) components : [], // (5) directives : {}, // (6) methods : {}, // (7) ctx : {}, // (8) val : {}, // (9) }); Application Component IF true , the URLs will not include the # IF true , the Application Component will re-render everytime you change routes . All Views you want the application to have All Global Components All Global Directives All Global Methods All Global Static non-reactive values All Global vars aka reactive values Property Type Description app Object Application Component history Boolean Use the hash ( # ) in the URLS ? ( Yes: false ) and ( No: true ) reactive Boolean Re-render everytime you change routes . routes Object All Views you want the application to have components Array All Global Components directives Object All Global Directives methods Object All Global Methods ctx Object All Global Static non-reactive values val Object All Global Values aka reactive values","title":"Introduction"},{"location":"#welcome-to-xtyle","text":"A minimalistic framework. This framework is heavily inspired by 5 tools. Frameworks (3) React Vue Mithril Tools (2) Immer ( Produce ) Material Design ( Ripple ) | x-ripple JSX | Demo < button x-ripple = {} > Click Me </ button >","title":"Welcome to Xtyle"},{"location":"#tools-to-build","text":"routes and history | A Router components | Reactive & Reusable Component (s) directives | Global Directives val | Global State Variables reactive ctx | Global Static Variables non-reactive app.use(plugin) | Reusable Plugins","title":"Tools to Build . . ."},{"location":"#application-setup","text":"app.js const app = xtyle . app ({ app : {}, // (1) history : false , // (2) reactive : true , // (3) routes : {}, // (4) components : [], // (5) directives : {}, // (6) methods : {}, // (7) ctx : {}, // (8) val : {}, // (9) }); Application Component IF true , the URLs will not include the # IF true , the Application Component will re-render everytime you change routes . All Views you want the application to have All Global Components All Global Directives All Global Methods All Global Static non-reactive values All Global vars aka reactive values Property Type Description app Object Application Component history Boolean Use the hash ( # ) in the URLS ? ( Yes: false ) and ( No: true ) reactive Boolean Re-render everytime you change routes . routes Object All Views you want the application to have components Array All Global Components directives Object All Global Directives methods Object All Global Methods ctx Object All Global Static non-reactive values val Object All Global Values aka reactive values","title":"Application Setup"},{"location":"application/","text":"Xtyle | Application Views Create Views with your Components Browser Usage < script src = \"https://unpkg.com/xtyle@latest\" ></ script > Xtyle App Demo | HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> <!-- Config --> < title > Xtyle App </ title > <!-- Xtyle JS --> < script src = \"https://unpkg.com/xtyle@latest\" ></ script > </ head > < body > < div id = \"app\" ></ div > <!-- Xtyle Code --> < script > // Inject CSS xtyle . inject ({ id : \"xtyle-app\" , code : `main { margin-top: 25%; } button { margin: 0 2px; }` , }); // Global Reactive const dict = xtyle . dict ({ count : 0 , add () { this . state = ( draft ) => { if ( draft . count > 9 ) { this . reset (); } else { draft . count += 1 ; } }; }, }); // Reusable Component (Global State) const Component = xtyle . dom ({ tag : \"button\" , data : { dict , }, attrs : { \"x-on:click\" : () => dict . state . add (), }, slot : { default () { // Access $store.project (Defined in the App Section) const { project } = this . $store ; const { name } = project . state ; // Access \"dict\" const { count } = dict . state ; // You can also use: `this.state.dict` return `(Global- ${ name } ) Count is: ${ count } ` ; }, }, }); // Reusable Component (Local State) const maxCount = 5 ; const LocalComponent = xtyle . dom ({ tag : \"button\" , data : { count : 0 , }, attrs : { // Attrs uses (`self`) \"x-on:click\" : ( self ) => { const { count } = self . state ; const isMax = count > maxCount ; if ( ! isMax ) { /* [Update Current Values] @set(method) => state */ self . state = ( draft ) => { draft . count += 1 ; }; } else { self . $reset (); } }, }, slot : { // Slot(s) uses (`this`) default () { const { count } = this . state ; return \"Count is: \" + count ; }, }, }); // Home Page const pageHome = { slot : { default () { const { $route , $router } = this ; const current = $router . args . name || \"home\" ; const pageName = current . charAt ( 0 ). toUpperCase () + current . slice ( 1 ); return [ \"div\" , {}, [ [ \"h3\" , {}, pageName + \" | Page\" ], [ \"br\" , {}, []], LocalComponent (), Component (), ], ]; }, }, }; // App Component const App = { slot : { default () { const { $route , $router } = this ; return [ \"main\" , { style : \"text-align: center;\" , }, [ \"Xtyle Application\" , [ \"br\" , {}, []], [ \"br\" , {}, []], [ \"button\" , { \"x-on:click\" : () => { $router . go ( \"/\" ); }, }, [ \"home\" ], ], [ \"button\" , { \"x-on:click\" : () => { $router . go ( \"/about\" ); }, }, [ \"about\" ], ], [ \"button\" , { \"x-ripple\" : { color : \"red\" , circle : true , center : true }, }, [ \"x-ripple\" ], ], [ \"br\" , {}, []], [ \"br\" , {}, []], $route , ], ]; }, }, }; // Xtyle App const app = xtyle . app ({ app : App , val : { project : { name : \"xtyle\" , }, }, methods : { changeTitle () { console . log ( this ); }, }, routes : { \"/\" : pageHome , \"/{name}\" : pageHome , }, }); // Mount app . mount ( \"#app\" ); </ script > </ body > </ html >","title":"Application"},{"location":"application/#xtyle-application","text":"Views Create Views with your Components","title":"Xtyle | Application"},{"location":"application/#browser-usage","text":"< script src = \"https://unpkg.com/xtyle@latest\" ></ script > Xtyle App","title":"Browser Usage"},{"location":"application/#demo-html","text":"<!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> <!-- Config --> < title > Xtyle App </ title > <!-- Xtyle JS --> < script src = \"https://unpkg.com/xtyle@latest\" ></ script > </ head > < body > < div id = \"app\" ></ div > <!-- Xtyle Code --> < script > // Inject CSS xtyle . inject ({ id : \"xtyle-app\" , code : `main { margin-top: 25%; } button { margin: 0 2px; }` , }); // Global Reactive const dict = xtyle . dict ({ count : 0 , add () { this . state = ( draft ) => { if ( draft . count > 9 ) { this . reset (); } else { draft . count += 1 ; } }; }, }); // Reusable Component (Global State) const Component = xtyle . dom ({ tag : \"button\" , data : { dict , }, attrs : { \"x-on:click\" : () => dict . state . add (), }, slot : { default () { // Access $store.project (Defined in the App Section) const { project } = this . $store ; const { name } = project . state ; // Access \"dict\" const { count } = dict . state ; // You can also use: `this.state.dict` return `(Global- ${ name } ) Count is: ${ count } ` ; }, }, }); // Reusable Component (Local State) const maxCount = 5 ; const LocalComponent = xtyle . dom ({ tag : \"button\" , data : { count : 0 , }, attrs : { // Attrs uses (`self`) \"x-on:click\" : ( self ) => { const { count } = self . state ; const isMax = count > maxCount ; if ( ! isMax ) { /* [Update Current Values] @set(method) => state */ self . state = ( draft ) => { draft . count += 1 ; }; } else { self . $reset (); } }, }, slot : { // Slot(s) uses (`this`) default () { const { count } = this . state ; return \"Count is: \" + count ; }, }, }); // Home Page const pageHome = { slot : { default () { const { $route , $router } = this ; const current = $router . args . name || \"home\" ; const pageName = current . charAt ( 0 ). toUpperCase () + current . slice ( 1 ); return [ \"div\" , {}, [ [ \"h3\" , {}, pageName + \" | Page\" ], [ \"br\" , {}, []], LocalComponent (), Component (), ], ]; }, }, }; // App Component const App = { slot : { default () { const { $route , $router } = this ; return [ \"main\" , { style : \"text-align: center;\" , }, [ \"Xtyle Application\" , [ \"br\" , {}, []], [ \"br\" , {}, []], [ \"button\" , { \"x-on:click\" : () => { $router . go ( \"/\" ); }, }, [ \"home\" ], ], [ \"button\" , { \"x-on:click\" : () => { $router . go ( \"/about\" ); }, }, [ \"about\" ], ], [ \"button\" , { \"x-ripple\" : { color : \"red\" , circle : true , center : true }, }, [ \"x-ripple\" ], ], [ \"br\" , {}, []], [ \"br\" , {}, []], $route , ], ]; }, }, }; // Xtyle App const app = xtyle . app ({ app : App , val : { project : { name : \"xtyle\" , }, }, methods : { changeTitle () { console . log ( this ); }, }, routes : { \"/\" : pageHome , \"/{name}\" : pageHome , }, }); // Mount app . mount ( \"#app\" ); </ script > </ body > </ html >","title":"Demo | HTML"},{"location":"component/","text":"Reusable Component (s) Create reusable components Component | Setup component.js export default xtyle . dom ({ tag : \"string\" , // (1) props : {}, // (2) data : {}, // (3) sync : {}, // (4) follow : [], // (5) methods : {}, // (6) slots : [], // (7) slot : { default () {}, // (8) }, attrs : {}, // (9) css : {}, // (10) style : {}, // (11) // Events init () {}, // (12) mounted () {}, // (13) }); HTML element <tag> Argumnets to be passed to the component Component's Reactive-Data Sync Values with parent. Binds { componentKey : parentKey } List all vars that the component should follow and react to changes Component's internal methods List of slots you will like to create. If none is defined, the default slot will be rendered. Each function will be representing a slot HTML ( slot ) element attributes HTML ( slot ) element class (es) HTML ( slot ) element style (s) Runs Onces as long as the component is not re-render by the parent Runs when Mounted & Updated Property Type Description tag String HTML element <tag> props Object Argumnets to be passed to the component data Object Component's Reactive-Data sync Object Sync Values with parent. Binds { componentKey : parentKey } follow Array(String) List all vars that the component should follow and react to changes methods Object Component's internal methods slots Array(String) List of slots you will like to create slot Object Each slot must be a function attrs Object HTML ( slot ) element attributes css Object HTML ( slot ) element class (es) style Object HTML ( slot ) element style (s) Component | Events Property Description init Runs Onces as long as the component is not re-render by the parent mounted Runs when Mounted & Updated Re writable props Props are rewritable by default. But you can also change configurations from the pre-defined component(s). $sync $slot $attrs $methods $mounted myComponent ({ $sync : {}, $slot : {}, $attrs : {}, $methods : {}, $mounted () {}, titlePROP : \"Hello World\" , }); Internal Code switch ( key ) { case \"$sync\" : schema . sync = { ... schema . sync , ... kwargs . $sync }; break ; case \"$slot\" : schema . slot = { ... schema . slot , ... kwargs . $slot }; break ; case \"$attrs\" : schema . attrs = { ... schema . attrs , ... kwargs . $attrs }; break ; case \"$methods\" : schema . methods = { ... schema . methods , ... kwargs . $methods }; break ; case \"$mounted\" : schema . mounted = kwargs . $mounted ; break ; }","title":"Component"},{"location":"component/#reusable-components","text":"Create reusable components","title":"Reusable Component(s)"},{"location":"component/#component-setup","text":"component.js export default xtyle . dom ({ tag : \"string\" , // (1) props : {}, // (2) data : {}, // (3) sync : {}, // (4) follow : [], // (5) methods : {}, // (6) slots : [], // (7) slot : { default () {}, // (8) }, attrs : {}, // (9) css : {}, // (10) style : {}, // (11) // Events init () {}, // (12) mounted () {}, // (13) }); HTML element <tag> Argumnets to be passed to the component Component's Reactive-Data Sync Values with parent. Binds { componentKey : parentKey } List all vars that the component should follow and react to changes Component's internal methods List of slots you will like to create. If none is defined, the default slot will be rendered. Each function will be representing a slot HTML ( slot ) element attributes HTML ( slot ) element class (es) HTML ( slot ) element style (s) Runs Onces as long as the component is not re-render by the parent Runs when Mounted & Updated Property Type Description tag String HTML element <tag> props Object Argumnets to be passed to the component data Object Component's Reactive-Data sync Object Sync Values with parent. Binds { componentKey : parentKey } follow Array(String) List all vars that the component should follow and react to changes methods Object Component's internal methods slots Array(String) List of slots you will like to create slot Object Each slot must be a function attrs Object HTML ( slot ) element attributes css Object HTML ( slot ) element class (es) style Object HTML ( slot ) element style (s)","title":"Component | Setup"},{"location":"component/#component-events","text":"Property Description init Runs Onces as long as the component is not re-render by the parent mounted Runs when Mounted & Updated","title":"Component | Events"},{"location":"component/#rewritable","text":"props Props are rewritable by default. But you can also change configurations from the pre-defined component(s). $sync $slot $attrs $methods $mounted myComponent ({ $sync : {}, $slot : {}, $attrs : {}, $methods : {}, $mounted () {}, titlePROP : \"Hello World\" , });","title":"Rewritable"},{"location":"component/#internal-code","text":"switch ( key ) { case \"$sync\" : schema . sync = { ... schema . sync , ... kwargs . $sync }; break ; case \"$slot\" : schema . slot = { ... schema . slot , ... kwargs . $slot }; break ; case \"$attrs\" : schema . attrs = { ... schema . attrs , ... kwargs . $attrs }; break ; case \"$methods\" : schema . methods = { ... schema . methods , ... kwargs . $methods }; break ; case \"$mounted\" : schema . mounted = kwargs . $mounted ; break ; }","title":"Internal Code"},{"location":"directives/","text":"You can create your own directives Creating // Xtyle App const app = xtyle . app ({ // ... directives : { css ( vnode , value ) { // IF (VDom) => is a Component // IF NOT => is a HTML <Element> const element = vnode . vdom ? vnode . vdom : vnode ; // Change Color element . style . backgroundColor = value . color ; }, }, // ... }); Imaginary Usage < div x-css = \"{ color: 'black' }\" ></ div > Real Usage const HyperScript = [ \"div\" , { \"x-css\" : { color : \"black\" }, }, [ /* children */ ], ]; Built-In Tip There are two (2) built-in directives // xtyle.dom export default { // Attr(s) required the { self } value to access the Component attrs : { \"x-on:click\" : () => console . log ( \"Clicked\" ), \"x-ripple\" : { center : false , circle : true , color : \"red\" }, }, }; Using @ You can use @ instead of x-on: // xtyle.dom export default { attrs : { \"@click\" : () => console . log ( \"Clicked\" ), }, }; Using @ You can NOT use @ instead of x-on: when using JSX // xtyle.dom export default { slot : { default () { const Good = < button x - on : click = \"Will Work\" > < /button>; const Bad = < button @ click = \"Will NOT Work\" > < /button>; }, }, };","title":"Directives"},{"location":"directives/#creating","text":"// Xtyle App const app = xtyle . app ({ // ... directives : { css ( vnode , value ) { // IF (VDom) => is a Component // IF NOT => is a HTML <Element> const element = vnode . vdom ? vnode . vdom : vnode ; // Change Color element . style . backgroundColor = value . color ; }, }, // ... }); Imaginary Usage < div x-css = \"{ color: 'black' }\" ></ div > Real Usage const HyperScript = [ \"div\" , { \"x-css\" : { color : \"black\" }, }, [ /* children */ ], ];","title":"Creating"},{"location":"directives/#built-in","text":"Tip There are two (2) built-in directives // xtyle.dom export default { // Attr(s) required the { self } value to access the Component attrs : { \"x-on:click\" : () => console . log ( \"Clicked\" ), \"x-ripple\" : { center : false , circle : true , color : \"red\" }, }, }; Using @ You can use @ instead of x-on: // xtyle.dom export default { attrs : { \"@click\" : () => console . log ( \"Clicked\" ), }, }; Using @ You can NOT use @ instead of x-on: when using JSX // xtyle.dom export default { slot : { default () { const Good = < button x - on : click = \"Will Work\" > < /button>; const Bad = < button @ click = \"Will NOT Work\" > < /button>; }, }, };","title":"Built-In"},{"location":"plugins/","text":"Usage const app = xtyle . app ({ /* Setup */ }); app . use ( pluginA ); app . use ( pluginB ); Plugin ( A ) const pluginA = { install ( app , opts ) { app . mixin ({ directives : { css ( vnode , value ) { const self = vnode . vdom ? vnode . vdom : vnode ; self . style . color = value . color ; }, }, }); }, }; Plugin ( B ) const pluginB = { install ( app , opts ) { app . mixin ({ directives : { extra : ( vnode , value ) => { const self = vnode . vdom ? vnode . vdom : vnode ; self . style . backgroundColor = value . color ; }, }, }); }, };","title":"Plugins"},{"location":"plugins/#usage","text":"const app = xtyle . app ({ /* Setup */ }); app . use ( pluginA ); app . use ( pluginB );","title":"Usage"},{"location":"plugins/#plugin-a","text":"const pluginA = { install ( app , opts ) { app . mixin ({ directives : { css ( vnode , value ) { const self = vnode . vdom ? vnode . vdom : vnode ; self . style . color = value . color ; }, }, }); }, };","title":"Plugin (A)"},{"location":"plugins/#plugin-b","text":"const pluginB = { install ( app , opts ) { app . mixin ({ directives : { extra : ( vnode , value ) => { const self = vnode . vdom ? vnode . vdom : vnode ; self . style . backgroundColor = value . color ; }, }, }); }, };","title":"Plugin (B)"},{"location":"routes/","text":"Xtyle | Routes Tip You can define route (s) like this some-{key1}-{key2}/{key3} export default { routes : { \"/mypath/some-{key1}-{key2}/{key3}\" : pageComponent , }, }; Controller You can access the current router via the this.$router inside your components. View You can access the current route via the this.$route inside your components. const myComponent = { mounted () { const { $router } = this ; console . log ( $router ); }, slot : { default () { const { $route } = this ; return $route ; }, }, }; $router You should see . . . go to change routes. route path args your pre-defined arguments query any paramater in the query ?key1=val1&key2=val2 Example $router { \"go\" : \"function\" , \"route\" : \"/mypath/some-{key1}-{key2}/{key3}\" , \"path\" : \"/mypath/some-val1-val2/val3\" , \"args\" : { \"key1\" : \"val1\" , \"key2\" : \"val2\" , \"key3\" : \"val3\" }, \"query\" : { \"key\" : \"val\" } }","title":"Routes"},{"location":"routes/#xtyle-routes","text":"Tip You can define route (s) like this some-{key1}-{key2}/{key3} export default { routes : { \"/mypath/some-{key1}-{key2}/{key3}\" : pageComponent , }, }; Controller You can access the current router via the this.$router inside your components. View You can access the current route via the this.$route inside your components. const myComponent = { mounted () { const { $router } = this ; console . log ( $router ); }, slot : { default () { const { $route } = this ; return $route ; }, }, }; $router You should see . . . go to change routes. route path args your pre-defined arguments query any paramater in the query ?key1=val1&key2=val2","title":"Xtyle | Routes"},{"location":"routes/#example-router","text":"{ \"go\" : \"function\" , \"route\" : \"/mypath/some-{key1}-{key2}/{key3}\" , \"path\" : \"/mypath/some-val1-val2/val3\" , \"args\" : { \"key1\" : \"val1\" , \"key2\" : \"val2\" , \"key3\" : \"val3\" }, \"query\" : { \"key\" : \"val\" } }","title":"Example $router"},{"location":"store/","text":"$store and xtyle.dict Creating and using reactive data. tag Having a tag creates an element and NOT having a tag creates a document-fragment . To make the component reactive to the global $store you must use a tag Example ( $Store ) // Xtyle App const app = xtyle . app ({ // ... val : { counter : { count : 0 , }, }, // ... }); // xtyle.dom export default { tag : \"button\" , follow : [ \"counter\" ] // This makes the component reactive to `counter` changes slot : { default () { const { counter } = this . $store ; const { count } = counter . state ; return `Count is: ${ count } ` ; }, }, }; Example Reactive ( Dict ) // xtyle.dict const counter = xtyle . dict ({ count : 0 , }); // xtyle.dom export default { tag : \"button\" , data : { counter , // This makes the component reactive to `counter` changes }, attrs : { \"x-on:click\" : () => { counter . state = ( draft ) => ( draft . count += 1 ); }, }, slot : { default () { const { count } = counter . state ; return `Count is: ${ count } ` ; }, }, };","title":"Store"},{"location":"store/#store-and-xtyledict","text":"Creating and using reactive data. tag Having a tag creates an element and NOT having a tag creates a document-fragment . To make the component reactive to the global $store you must use a tag","title":"$store and xtyle.dict"},{"location":"store/#example-store","text":"// Xtyle App const app = xtyle . app ({ // ... val : { counter : { count : 0 , }, }, // ... }); // xtyle.dom export default { tag : \"button\" , follow : [ \"counter\" ] // This makes the component reactive to `counter` changes slot : { default () { const { counter } = this . $store ; const { count } = counter . state ; return `Count is: ${ count } ` ; }, }, };","title":"Example ($Store)"},{"location":"store/#example-reactive-dict","text":"// xtyle.dict const counter = xtyle . dict ({ count : 0 , }); // xtyle.dom export default { tag : \"button\" , data : { counter , // This makes the component reactive to `counter` changes }, attrs : { \"x-on:click\" : () => { counter . state = ( draft ) => ( draft . count += 1 ); }, }, slot : { default () { const { count } = counter . state ; return `Count is: ${ count } ` ; }, }, };","title":"Example Reactive (Dict)"},{"location":"components/advanced/","text":"You can control siblings by accessing them via their slot name . // xtyle.dom export default { slots : [ \"main\" , \"extra\" ], // Slot(s) use { this } to access the Component slot : { main () { const hideSibling = () => ( this . slot . extra . style . display = \"none\" ); return [ \"button\" , { \"x-on:click\" : hideSibling , }, \"Hide Extra\" , ]; }, extra () { return [ \"h1\" , {}, \"Extra Slot\" ]; }, }, }; You can control siblings by calling them via their slot name using the toggle to toggle between class (es) . // Inject CSS for (Demo Purposes) xtyle . inject ({ id : \"demo-test\" , code : \".hide{ display: none; }\" , }); // xtyle.dom export default { slots : [ \"main\" , \"extra\" ], slot : { main () { const toggleSibling = () => this . toggle ( \"extra\" , \"hide\" ); return [ \"button\" , { \"x-on:click\" : toggleSibling , }, \"Hide Extra\" , ]; }, extra () { return [ \"h1\" , {}, \"Extra Slot\" ]; }, }, };","title":"Advanced"},{"location":"components/api/","text":"( API ) Components const CONTROLLER = { get state () {}, // { Values } Self set state ( method ) {}, // { Values } Self $reset () {}, // { State } Reset ctx : {}, // Non-Reactive Local Data get $router () {}, // { router } App get $route () {}, // { route } App View get $gui () {}, // { components } App get $store () {}, // { val } App get $ctx () {}, // { ctx } App get $custom () {}, // { custom } App toggle ( el , key , value = null ) {}, // { Toggle } Children / Siblings $toggle ( key , value = null ) {}, // { Toggle } Parent / Self get $methods () {}, // { methods } App $emit ( action , value = null ) {}, // { Emit } from Child to Parent get $ui () {}, // { Globals } $use (... components ) {}, // Merge Components }; State Key Description get() => state return current values set(method) => state update current values $store App val (s) Values aka reactive values. You can Read More. . . Example ( Get ) const buttonComponent = xtyle . dom ({ tag : \"button\" , data : { title : \"Click Me\" , }, slot : { default () { const { title } = this . state ; return title ; }, }, }); Example ( Set ) { self || this }. state = ( draft ) => { draft . count += 1 ; }; // attrs uses (`self`) // slot uses (`this`) const maxCount = 5 ; const buttonComponent = xtyle . dom ({ tag : \"button\" , data : { count : 0 , }, attrs : { // Attrs uses (`self`) \"x-on:click\" : ( self ) => { const { count } = self . state ; const isMax = count > maxCount ; if ( ! isMax ) { /* [Update Current Values] @set(method) => state */ self . state = ( draft ) => { draft . count += 1 ; }; } else { self . $reset (); } }, }, slot : { // Slot(s) uses (`this`) default () { const { count } = this . state ; return \"Count is: \" + count ; }, }, }); Tools for (Slots and Self) Key Description $reset Reset current-state to the original-state $toggle Self element toggle class (es) $router App router controller $gui App components $ctx App ctx (s) Static non-reactive values $custom App custom (s) Custom Objects of Any Type $methods App methods $emit Emit a method with arguments from Child to Parent $ui Application Configs $use Merge components into a fragment Tools for (Slots and Local) Key Description toggle Children element toggle class (es) ctx Non-Reactive local variables $Emit Method $emit ( \"parentMethod\" , { txt : \"hello\" }); Update const parentKey = \"title\" ; const value = \"Welcome\" ; $emit ( `update: ${ key } ` , value );","title":"API"},{"location":"components/api/#api-components","text":"const CONTROLLER = { get state () {}, // { Values } Self set state ( method ) {}, // { Values } Self $reset () {}, // { State } Reset ctx : {}, // Non-Reactive Local Data get $router () {}, // { router } App get $route () {}, // { route } App View get $gui () {}, // { components } App get $store () {}, // { val } App get $ctx () {}, // { ctx } App get $custom () {}, // { custom } App toggle ( el , key , value = null ) {}, // { Toggle } Children / Siblings $toggle ( key , value = null ) {}, // { Toggle } Parent / Self get $methods () {}, // { methods } App $emit ( action , value = null ) {}, // { Emit } from Child to Parent get $ui () {}, // { Globals } $use (... components ) {}, // Merge Components };","title":"(API) Components"},{"location":"components/api/#state","text":"Key Description get() => state return current values set(method) => state update current values $store App val (s) Values aka reactive values. You can Read More. . .","title":"State"},{"location":"components/api/#example-get","text":"const buttonComponent = xtyle . dom ({ tag : \"button\" , data : { title : \"Click Me\" , }, slot : { default () { const { title } = this . state ; return title ; }, }, });","title":"Example (Get)"},{"location":"components/api/#example-set","text":"{ self || this }. state = ( draft ) => { draft . count += 1 ; }; // attrs uses (`self`) // slot uses (`this`) const maxCount = 5 ; const buttonComponent = xtyle . dom ({ tag : \"button\" , data : { count : 0 , }, attrs : { // Attrs uses (`self`) \"x-on:click\" : ( self ) => { const { count } = self . state ; const isMax = count > maxCount ; if ( ! isMax ) { /* [Update Current Values] @set(method) => state */ self . state = ( draft ) => { draft . count += 1 ; }; } else { self . $reset (); } }, }, slot : { // Slot(s) uses (`this`) default () { const { count } = this . state ; return \"Count is: \" + count ; }, }, });","title":"Example (Set)"},{"location":"components/api/#tools-for-slots-and-self","text":"Key Description $reset Reset current-state to the original-state $toggle Self element toggle class (es) $router App router controller $gui App components $ctx App ctx (s) Static non-reactive values $custom App custom (s) Custom Objects of Any Type $methods App methods $emit Emit a method with arguments from Child to Parent $ui Application Configs $use Merge components into a fragment","title":"Tools for (Slots and Self)"},{"location":"components/api/#tools-for-slots-and-local","text":"Key Description toggle Children element toggle class (es) ctx Non-Reactive local variables","title":"Tools for (Slots and Local)"},{"location":"components/api/#emit","text":"","title":"$Emit"},{"location":"components/api/#method","text":"$emit ( \"parentMethod\" , { txt : \"hello\" });","title":"Method"},{"location":"components/api/#update","text":"const parentKey = \"title\" ; const value = \"Welcome\" ; $emit ( `update: ${ key } ` , value );","title":"Update"},{"location":"components/complex/","text":"JavaScript $use | Fragment // xtyle.dom export default { slot : { default () { // Attaching (this) as the parent component { is not required }. const list = listComponent ({ /* Props */ })( this ); const search = SearchComponent ({ update ( value ) { // Update List list . state = ( draft ) => ( draft . search = value ); }, })(); // Not Attached // Merged with ($use) return this . $use ( search , list ); }, }, }; const listComponent = xtyle . dom ({ tag : \"ul\" , props : { search : null , items : [ { text : \"Apple\" }, { text : \"Blueberry\" }, { text : \"Banana\" }, { text : \"Orange\" }, { text : \"Mango\" }, { text : \"Avocado\" }, { text : \"Lychee\" }, { text : \"Pineapple\" }, ], }, slot : { default () { const { items , search } = this . state ; let filtered = items ; if ( search ) { filtered = items . filter (( item ) => { const text = item . text . toLowerCase (); const query = search . toLowerCase (); return text . includes ( query ); }); } return filtered . map (( item ) => [ \"li\" , { \"x-on:dblclick\" : () => console . log ( item . text ), }, item . text , ]); }, }, }); const SearchComponent = xtyle . dom ({ props : { update : () => {}, }, slot : { default () { return [ \"input\" , { placeholder : \"Search\" , \"x-on:input\" : ( event ) => this . state . update ( event . target . value ), }, ]; }, }, }); HyperScript | Component // xtyle.dom export default { slot : { default () { const list = listComponent ({})( this ); const search = SearchComponent ({ update ( value ) { // Update List list . state = ( draft ) => ( draft . search = value ); }, })( this ); // Element return [ \"div\" , {}, [ search , list ]]; }, }, }; // etc ... JavaScript ( XML ) JSX | Fragment // xtyle.dom export default { slot : { default () { const list = listComponent ({})( this ); const search = SearchComponent ({ update ( value ) { // Update List list . state = ( draft ) => ( draft . search = value ); }, })( this ); // Merged Internally return ( < template > { search } { list } < /template> ); }, }, }; // etc ... JSX | Component // xtyle.dom export default { slot : { default () { const list = listComponent ({})( this ); const search = SearchComponent ({ update ( value ) { // Update List list . state = ( draft ) => ( draft . search = value ); }, })( this ); // Element return ( < div > { search } { list } < /div> ); }, }, }; // etc ...","title":"Complex"},{"location":"components/complex/#javascript","text":"","title":"JavaScript"},{"location":"components/complex/#use-fragment","text":"// xtyle.dom export default { slot : { default () { // Attaching (this) as the parent component { is not required }. const list = listComponent ({ /* Props */ })( this ); const search = SearchComponent ({ update ( value ) { // Update List list . state = ( draft ) => ( draft . search = value ); }, })(); // Not Attached // Merged with ($use) return this . $use ( search , list ); }, }, }; const listComponent = xtyle . dom ({ tag : \"ul\" , props : { search : null , items : [ { text : \"Apple\" }, { text : \"Blueberry\" }, { text : \"Banana\" }, { text : \"Orange\" }, { text : \"Mango\" }, { text : \"Avocado\" }, { text : \"Lychee\" }, { text : \"Pineapple\" }, ], }, slot : { default () { const { items , search } = this . state ; let filtered = items ; if ( search ) { filtered = items . filter (( item ) => { const text = item . text . toLowerCase (); const query = search . toLowerCase (); return text . includes ( query ); }); } return filtered . map (( item ) => [ \"li\" , { \"x-on:dblclick\" : () => console . log ( item . text ), }, item . text , ]); }, }, }); const SearchComponent = xtyle . dom ({ props : { update : () => {}, }, slot : { default () { return [ \"input\" , { placeholder : \"Search\" , \"x-on:input\" : ( event ) => this . state . update ( event . target . value ), }, ]; }, }, });","title":"$use | Fragment"},{"location":"components/complex/#hyperscript-component","text":"// xtyle.dom export default { slot : { default () { const list = listComponent ({})( this ); const search = SearchComponent ({ update ( value ) { // Update List list . state = ( draft ) => ( draft . search = value ); }, })( this ); // Element return [ \"div\" , {}, [ search , list ]]; }, }, }; // etc ...","title":"HyperScript | Component"},{"location":"components/complex/#javascript-xml","text":"","title":"JavaScript ( XML )"},{"location":"components/complex/#jsx-fragment","text":"// xtyle.dom export default { slot : { default () { const list = listComponent ({})( this ); const search = SearchComponent ({ update ( value ) { // Update List list . state = ( draft ) => ( draft . search = value ); }, })( this ); // Merged Internally return ( < template > { search } { list } < /template> ); }, }, }; // etc ...","title":"JSX | Fragment"},{"location":"components/complex/#jsx-component","text":"// xtyle.dom export default { slot : { default () { const list = listComponent ({})( this ); const search = SearchComponent ({ update ( value ) { // Update List list . state = ( draft ) => ( draft . search = value ); }, })( this ); // Element return ( < div > { search } { list } < /div> ); }, }, }; // etc ...","title":"JSX | Component"},{"location":"components/non-reactive/","text":"This is the simplest form of creating a reusable component. const Title = ( text ) => [ \"h1\" , {}, text ]; You can then use it in a xtyle.dom component to test its functionality. const Title = ( text ) => [ \"h1\" , {}, text ]; // xtyle.dom export default { slot : { default () { return [ Title ( \"Hello World 1\" ), Title ( \"Hello World 2\" )]; }, }, };","title":"Non-Reactive"},{"location":"components/reactive/","text":"A simple but reactive component. self | this When defining a component, if using events inside the definition, you must use self to access the properties. In the slot(s) and methods you must use this // xtyle.dom export default { tag : \"button\" , data : { count : 0 , }, // Attr(s) required the { self } value to access the Component attrs : { \"x-on:click\" : ( self ) => self . state . add (), }, // Method(s) use { this } to access the Component methods : { add () { this . state = ( draft ) => ( draft . count += 1 ); }, }, // Slot(s) use { this } to access the Component slot : { default () { return `Count is: ${ this . state . count } ` ; }, }, };","title":"Reactive"},{"location":"components/slot/","text":"Slot Return(s) | Component xtyle . dom ({ // slot ... default () { return null ; }, }); Nothing null return null ; H yper- S cript Array return [ \"h3\" , {}, \"Hello World\" ]; HTML Element const element = document . createElement ( \"div\" ); element . innerText = \"Hello World\" ; return element ; Another Component | Props Rendered with props return myComponent ({ /* Props */ })( this ); Another Component | No-Props Not yet rendered | Without props return myComponent ; $use to Merge | Components Creates a fragment return this . $use (... components ); Example return this . $use ( search , list );","title":"Slot(s)"},{"location":"components/slot/#slot-returns-component","text":"xtyle . dom ({ // slot ... default () { return null ; }, });","title":"Slot Return(s) | Component"},{"location":"components/slot/#nothing-null","text":"return null ;","title":"Nothing null"},{"location":"components/slot/#hyper-script-array","text":"return [ \"h3\" , {}, \"Hello World\" ];","title":"Hyper-Script Array"},{"location":"components/slot/#html-element","text":"const element = document . createElement ( \"div\" ); element . innerText = \"Hello World\" ; return element ;","title":"HTML Element"},{"location":"components/slot/#another-component-props","text":"Rendered with props return myComponent ({ /* Props */ })( this );","title":"Another Component | Props"},{"location":"components/slot/#another-component-no-props","text":"Not yet rendered | Without props return myComponent ;","title":"Another Component | No-Props"},{"location":"components/slot/#use-to-merge-components","text":"Creates a fragment return this . $use (... components );","title":"$use to Merge | Components"},{"location":"components/slot/#example","text":"return this . $use ( search , list );","title":"Example"},{"location":"jsx/","text":"Here you will learn how to use this library with JSX and Vite . Click Here to Download the template. Is just a simple vite template with the configurations to transform JSX into Xtyle Code After downloading and unzipping just run the following code inside the folder: Installation npm install npm run dev Demo | Application Note It comes with five (5) main parts . ( Main , App , View , Button , Page Name ) Main App View Button Page Name Main (App) ./src/main.js import App from \"./App\" ; import View from \"./views\" ; // Plugin (Lib) import Plugin from \"./xlib\" ; // Setup const app = xtyle . app ({ app : App , routes : { \"/\" : View . sample , \"/{name}\" : View . sample , }, }); // Install Plugin app . use ( Plugin , { name : \"xtyler\" , debug : true , }); // Mount App app . mount ( \"#app\" ); Application (Object) ./src/App.jsx import javascriptLogo from \"./assets/logos/javascript.svg\" ; import xtyleLogo from \"./assets/logos/xtyle.svg\" ; export default { slot : { default () { const { $route , $router } = this ; if ( $router . route === \"404\" ) { return $route ; } return ( < div id = \"app\" > < h1 > Xtyle | App < /h1> < a href = \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target = \"_blank\" > < img src = { javascriptLogo } class = \"logo vanilla\" alt = \"JavaScript logo\" /> < /a> < a href = \"https://hlop3z.github.io/xtyle/\" target = \"_blank\" > < img src = { xtyleLogo } class = \"logo\" alt = \"Xtyle logo\" /> < /a> < br /> < br /> < button x - ripple = {{ color : \"red\" , circle : true , center : true }} > X - Ripple < /button> < br /> < br /> { $route } < /div> ); }, }, }; View (Object) ./src/views/sample.jsx export default { tag : \"div\" , slot : { default () { const { $router } = this ; const { pageName , xButton } = this . $gui ; return ( < div > { pageName ()} < br /> < button x - ripple x - on : click = {() => $router . go ( \"/\" )} > Go Home < /button> < button x - on : click = {() => $router . go ( \"/2nd\" )} > Go Second < /button> < button x - on : click = {() => $router . go ( \"/3rd\" )} > Go Third < /button> < button x - on : click = {() => $router . go ( \"/not/found/\" + new Date (). toISOString ()) } > Page Not Found < /button> < br /> < br /> { xButton ({ isGlobal : false })} { xButton ({ isGlobal : true })} < /div> ); }, }, }; Button (Component) ./src/components/x/button.jsx export default { tag : \"button\" , follow : [ \"counter\" ], props : { isGlobal : false , }, data : { count : 0 , }, attrs : { \"x-on:click\" : ( vnode , event ) => { const { isGlobal } = vnode . state ; const { counter } = vnode . $ui . val ; if ( isGlobal ) { counter . state = ( draft ) => { draft . count += 1 ; }; } else { vnode . state = ( draft ) => { draft . count += 1 ; }; } console . log ( event ); }, }, slot : { default () { const { isGlobal } = this . state ; if ( isGlobal ) { const { counter } = this . $ui . val ; const { count } = counter . state ; return \"Global Count is: \" + count ; } const { count } = this . state ; return \"Local Count is: \" + count ; }, }, }; Page Name (Component) ./src/components/page-name.jsx export default { tag : \"h3\" , slot : { default () { const { $router } = this ; const current = $router . args . name || \"home\" ; const pageName = current . charAt ( 0 ). toUpperCase () + current . slice ( 1 ); return pageName + \" View\" ; }, }, };","title":"Getting Started"},{"location":"jsx/#installation","text":"npm install npm run dev","title":"Installation"},{"location":"jsx/#demo-application","text":"Note It comes with five (5) main parts . ( Main , App , View , Button , Page Name ) Main App View Button Page Name Main (App) ./src/main.js import App from \"./App\" ; import View from \"./views\" ; // Plugin (Lib) import Plugin from \"./xlib\" ; // Setup const app = xtyle . app ({ app : App , routes : { \"/\" : View . sample , \"/{name}\" : View . sample , }, }); // Install Plugin app . use ( Plugin , { name : \"xtyler\" , debug : true , }); // Mount App app . mount ( \"#app\" ); Application (Object) ./src/App.jsx import javascriptLogo from \"./assets/logos/javascript.svg\" ; import xtyleLogo from \"./assets/logos/xtyle.svg\" ; export default { slot : { default () { const { $route , $router } = this ; if ( $router . route === \"404\" ) { return $route ; } return ( < div id = \"app\" > < h1 > Xtyle | App < /h1> < a href = \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target = \"_blank\" > < img src = { javascriptLogo } class = \"logo vanilla\" alt = \"JavaScript logo\" /> < /a> < a href = \"https://hlop3z.github.io/xtyle/\" target = \"_blank\" > < img src = { xtyleLogo } class = \"logo\" alt = \"Xtyle logo\" /> < /a> < br /> < br /> < button x - ripple = {{ color : \"red\" , circle : true , center : true }} > X - Ripple < /button> < br /> < br /> { $route } < /div> ); }, }, }; View (Object) ./src/views/sample.jsx export default { tag : \"div\" , slot : { default () { const { $router } = this ; const { pageName , xButton } = this . $gui ; return ( < div > { pageName ()} < br /> < button x - ripple x - on : click = {() => $router . go ( \"/\" )} > Go Home < /button> < button x - on : click = {() => $router . go ( \"/2nd\" )} > Go Second < /button> < button x - on : click = {() => $router . go ( \"/3rd\" )} > Go Third < /button> < button x - on : click = {() => $router . go ( \"/not/found/\" + new Date (). toISOString ()) } > Page Not Found < /button> < br /> < br /> { xButton ({ isGlobal : false })} { xButton ({ isGlobal : true })} < /div> ); }, }, }; Button (Component) ./src/components/x/button.jsx export default { tag : \"button\" , follow : [ \"counter\" ], props : { isGlobal : false , }, data : { count : 0 , }, attrs : { \"x-on:click\" : ( vnode , event ) => { const { isGlobal } = vnode . state ; const { counter } = vnode . $ui . val ; if ( isGlobal ) { counter . state = ( draft ) => { draft . count += 1 ; }; } else { vnode . state = ( draft ) => { draft . count += 1 ; }; } console . log ( event ); }, }, slot : { default () { const { isGlobal } = this . state ; if ( isGlobal ) { const { counter } = this . $ui . val ; const { count } = counter . state ; return \"Global Count is: \" + count ; } const { count } = this . state ; return \"Local Count is: \" + count ; }, }, }; Page Name (Component) ./src/components/page-name.jsx export default { tag : \"h3\" , slot : { default () { const { $router } = this ; const current = $router . args . name || \"home\" ; const pageName = current . charAt ( 0 ). toUpperCase () + current . slice ( 1 ); return pageName + \" View\" ; }, }, };","title":"Demo | Application"}]}