{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Xtyle | Component Components Create Reusable Components Browser Usage < script src = \"https://unpkg.com/xtyle@latest\" ></ script > Demo | HTML <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < title > Xtyle | App </ title > < script src = \"https://unpkg.com/xtyle@latest\" ></ script > </ head > < body > < div id = \"app\" ></ div > < script > const myComponent = xtyle . h ({ props : { title : { type : String , default : \"Hello World\" , }, }, data : { show : true , }, methods : { toggle () { this . show = ! this . show ; }, }, view () { return [ \"div\" , { \"@click\" : () => { console . log ( this . title ); this . toggle (); console . log ( this . show ); }, }, [[ \"h1\" , {}, [ \"Xtyle Project\" ]]], ]; }, }); const component = myComponent (); component . mount ( \"#app\" ); </ script > </ body > </ html >","title":"Component"},{"location":"#xtyle-component","text":"Components Create Reusable Components","title":"Xtyle | Component"},{"location":"#browser-usage","text":"< script src = \"https://unpkg.com/xtyle@latest\" ></ script >","title":"Browser Usage"},{"location":"#demo-html","text":"<!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < title > Xtyle | App </ title > < script src = \"https://unpkg.com/xtyle@latest\" ></ script > </ head > < body > < div id = \"app\" ></ div > < script > const myComponent = xtyle . h ({ props : { title : { type : String , default : \"Hello World\" , }, }, data : { show : true , }, methods : { toggle () { this . show = ! this . show ; }, }, view () { return [ \"div\" , { \"@click\" : () => { console . log ( this . title ); this . toggle (); console . log ( this . show ); }, }, [[ \"h1\" , {}, [ \"Xtyle Project\" ]]], ]; }, }); const component = myComponent (); component . mount ( \"#app\" ); </ script > </ body > </ html >","title":"Demo | HTML"},{"location":"application/","text":"Xtyle | Application Views Create Views with your Components Browser Usage < script src = \"https://unpkg.com/xtyle@latest\" ></ script > Demo | HTML <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < title > Xtyle | App </ title > < script src = \"https://unpkg.com/xtyle@latest\" ></ script > </ head > < body > < div id = \"app\" ></ div > < script > const pageHome = xtyle . h ({ view () { return [ \"div\" , { \"@click\" : () => { this . $ui . router . go ( \"/about\" ); }, style : \"cursor:pointer; user-select:none;\" , }, [[ \"h1\" , {}, [ \"Home Page\" ]]], ]; }, }); const pageAbout = xtyle . h ({ view () { return [ \"div\" , { \"@click\" : () => { this . $ui . router . go ( \"/\" ); }, style : \"cursor:pointer; user-select:none;\" , }, [[ \"h1\" , {}, [ \"About Page\" ]]], ]; }, }); const app = xtyle . app ({ root : \"#app\" , routes : { \"/\" : pageHome , \"/about\" : pageAbout , }, }); </ script > </ body > </ html >","title":"Application"},{"location":"application/#xtyle-application","text":"Views Create Views with your Components","title":"Xtyle | Application"},{"location":"application/#browser-usage","text":"< script src = \"https://unpkg.com/xtyle@latest\" ></ script >","title":"Browser Usage"},{"location":"application/#demo-html","text":"<!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < title > Xtyle | App </ title > < script src = \"https://unpkg.com/xtyle@latest\" ></ script > </ head > < body > < div id = \"app\" ></ div > < script > const pageHome = xtyle . h ({ view () { return [ \"div\" , { \"@click\" : () => { this . $ui . router . go ( \"/about\" ); }, style : \"cursor:pointer; user-select:none;\" , }, [[ \"h1\" , {}, [ \"Home Page\" ]]], ]; }, }); const pageAbout = xtyle . h ({ view () { return [ \"div\" , { \"@click\" : () => { this . $ui . router . go ( \"/\" ); }, style : \"cursor:pointer; user-select:none;\" , }, [[ \"h1\" , {}, [ \"About Page\" ]]], ]; }, }); const app = xtyle . app ({ root : \"#app\" , routes : { \"/\" : pageHome , \"/about\" : pageAbout , }, }); </ script > </ body > </ html >","title":"Demo | HTML"},{"location":"routes/","text":"Xtyle | Routes Tip You can define route (s) like this some-{key1}-{key2}/{key3} export default { routes : { \"/mypath/some-{key1}-{key2}/{key3}\" : pageComponent , }, }; Access You can access the current route via the $ui.router export default { mounted : () => { console . log ( this . $ui . router . current ); }, view : () => [ \"div\" , {}, [ \"Hello World\" ]], }; Return You should see . . . route path args your pre-defined arguments query any paramater in the query ?key1=val1&key2=val2 Example Output { \"route\" : \"/mypath/some-{key1}-{key2}/{key3}\" , \"path\" : \"/mypath/some-val1-val2/val3\" , \"args\" : { \"key1\" : \"val1\" , \"key2\" : \"val2\" , \"key3\" : \"val3\" }, \"query\" : { \"key\" : \"val\" } }","title":"Routes"},{"location":"routes/#xtyle-routes","text":"Tip You can define route (s) like this some-{key1}-{key2}/{key3} export default { routes : { \"/mypath/some-{key1}-{key2}/{key3}\" : pageComponent , }, }; Access You can access the current route via the $ui.router export default { mounted : () => { console . log ( this . $ui . router . current ); }, view : () => [ \"div\" , {}, [ \"Hello World\" ]], }; Return You should see . . . route path args your pre-defined arguments query any paramater in the query ?key1=val1&key2=val2","title":"Xtyle | Routes"},{"location":"routes/#example-output","text":"{ \"route\" : \"/mypath/some-{key1}-{key2}/{key3}\" , \"path\" : \"/mypath/some-val1-val2/val3\" , \"args\" : { \"key1\" : \"val1\" , \"key2\" : \"val2\" , \"key3\" : \"val3\" }, \"query\" : { \"key\" : \"val\" } }","title":"Example Output"},{"location":"api/application/","text":"App | API export default { root : \"#app\" , history : false , routes : {}, components : [], methods : {}, static : {}, vars : {}, }; Application | Setup Property Type Description root String or Element Where the Application will get mounted to history Boolean Use the hash ( # ) in the URLS ? ( Yes: false ) and ( No: true ) routes Object All Views you want the application to have components Array All Global Components methods Object All Global Methods static Object All Global Static non-reactive values vars Object All Global vars aka reactive values","title":"Application"},{"location":"api/application/#app-api","text":"export default { root : \"#app\" , history : false , routes : {}, components : [], methods : {}, static : {}, vars : {}, };","title":"App | API"},{"location":"api/application/#application-setup","text":"Property Type Description root String or Element Where the Application will get mounted to history Boolean Use the hash ( # ) in the URLS ? ( Yes: false ) and ( No: true ) routes Object All Views you want the application to have components Array All Global Components methods Object All Global Methods static Object All Global Static non-reactive values vars Object All Global vars aka reactive values","title":"Application | Setup"},{"location":"api/component/","text":"Component | API export default { follow : [], sync : {}, props : {}, data : {}, methods : {}, view : () => [ \"div\" , {}, [ \"Hello World\" ]], }; Component | Setup Property Type Description follow Array(String) List ALL vars that the component should Follow and React to Changes sync Object Sync Values with Parent. Binds { componentKey : parentKey } props Object Argumnets to be Passed to the Component data Object Component's Reactive-Data methods Object Component's Internal Methods view Function HyperScript Format Component | Props String Number Array Object Function Component | Events Property Description mounted Runs when Mounted & Updated init Runs Only Onces export default { mounted : () => {}, init : () => {}, view : () => [ \"div\" , {}, [ \"Hello World\" ]], }; Component | Core Property Description $el HTML Element $parent Virtual DOM Parent $gui Global Components $ui Global Tools export default { mounted : () => { console . log ( this . $el ); console . log ( this . $parent ); console . log ( this . $gui ); console . log ( this . $ui ); }, view : () => [ \"div\" , {}, [ \"Hello World\" ]], };","title":"Component"},{"location":"api/component/#component-api","text":"export default { follow : [], sync : {}, props : {}, data : {}, methods : {}, view : () => [ \"div\" , {}, [ \"Hello World\" ]], };","title":"Component | API"},{"location":"api/component/#component-setup","text":"Property Type Description follow Array(String) List ALL vars that the component should Follow and React to Changes sync Object Sync Values with Parent. Binds { componentKey : parentKey } props Object Argumnets to be Passed to the Component data Object Component's Reactive-Data methods Object Component's Internal Methods view Function HyperScript Format","title":"Component | Setup"},{"location":"api/component/#component-props","text":"String Number Array Object Function","title":"Component | Props"},{"location":"api/component/#component-events","text":"Property Description mounted Runs when Mounted & Updated init Runs Only Onces export default { mounted : () => {}, init : () => {}, view : () => [ \"div\" , {}, [ \"Hello World\" ]], };","title":"Component | Events"},{"location":"api/component/#component-core","text":"Property Description $el HTML Element $parent Virtual DOM Parent $gui Global Components $ui Global Tools export default { mounted : () => { console . log ( this . $el ); console . log ( this . $parent ); console . log ( this . $gui ); console . log ( this . $ui ); }, view : () => [ \"div\" , {}, [ \"Hello World\" ]], };","title":"Component | Core"},{"location":"api/ui/","text":"$UI | API export default { mounted : () => { this . $ui . router . go ( \"/about\" ); }, view : () => [ \"div\" , {}, [ \"Hello World\" ]], }; router Property Description go(path) Navigate to another View redraw Re-Render current View current Current active Path export default { mounted : () => { console . log ( this . $ui . router ); console . log ( this . $ui . static ); console . log ( this . $ui . methods ); console . log ( this . $ui . vars ); }, view : () => [ \"div\" , {}, [ \"Hello World\" ]], }; $ui Property Description router Application Router static Global Static Objects ( Non-Reactive ) methods Global Methods vars Global Objects ( Reactive ) current Current View","title":"UI"},{"location":"api/ui/#ui-api","text":"export default { mounted : () => { this . $ui . router . go ( \"/about\" ); }, view : () => [ \"div\" , {}, [ \"Hello World\" ]], };","title":"$UI | API"},{"location":"api/ui/#router","text":"Property Description go(path) Navigate to another View redraw Re-Render current View current Current active Path export default { mounted : () => { console . log ( this . $ui . router ); console . log ( this . $ui . static ); console . log ( this . $ui . methods ); console . log ( this . $ui . vars ); }, view : () => [ \"div\" , {}, [ \"Hello World\" ]], };","title":"router"},{"location":"api/ui/#ui","text":"Property Description router Application Router static Global Static Objects ( Non-Reactive ) methods Global Methods vars Global Objects ( Reactive ) current Current View","title":"$ui"}]}